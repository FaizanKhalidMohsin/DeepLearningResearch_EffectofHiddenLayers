{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Learning Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing the data and libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading data and libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['comments', 'description', 'duration', 'event', 'film_date',\n",
       "       'languages', 'main_speaker', 'name', 'num_speaker', 'published_date',\n",
       "       'ratings', 'related_talks', 'speaker_occupation', 'tags', 'title',\n",
       "       'url', 'views'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"ted_main.csv\")\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[['name', 'title', 'description', 'main_speaker', 'speaker_occupation', 'num_speaker', 'duration', 'event', 'film_date', 'published_date', 'comments', 'tags', 'languages', 'ratings', 'related_talks', 'url', 'views']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "df['film_date'] = df['film_date'].apply(lambda x: datetime.datetime.fromtimestamp( int(x)).strftime('%d-%m-%Y'))\n",
    "df['published_date'] = df['published_date'].apply(lambda x: datetime.datetime.fromtimestamp( int(x)).strftime('%d-%m-%Y'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n",
    "day_order = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TED2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TED2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TED2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TED2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>TED2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2545</th>\n",
       "      <td>TED2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2546</th>\n",
       "      <td>TED2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2547</th>\n",
       "      <td>TED2017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2548</th>\n",
       "      <td>TEDxMileHigh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2549</th>\n",
       "      <td>TED2017</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2550 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             event\n",
       "0          TED2006\n",
       "1          TED2006\n",
       "2          TED2006\n",
       "3          TED2006\n",
       "4          TED2006\n",
       "...            ...\n",
       "2545       TED2017\n",
       "2546       TED2017\n",
       "2547       TED2017\n",
       "2548  TEDxMileHigh\n",
       "2549       TED2017\n",
       "\n",
       "[2550 rows x 1 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['event']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['month'] = df['film_date'].apply(lambda x: month_order[int(x.split('-')[1]) - 1])\n",
    "\n",
    "month_df = pd.DataFrame(df['month'].value_counts()).reset_index()\n",
    "month_df.columns = ['month', 'talks']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ted = pd.read_csv('ted_main.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorize events into TED and TEDx; exclude those that are non-TED events\n",
    "ted = ted[ted['event'].str[0:3]=='TED'].reset_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of talks remain:  2439\n"
     ]
    }
   ],
   "source": [
    "ted.loc[:,'event_cat'] = ted['event'].apply(lambda x: 'TEDx' if x[0:4]=='TEDx' else 'TED')\n",
    "print (\"No. of talks remain: \", len(ted))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we change the Unix timstamp to human readable date format. Then we extract month and day of week from film date and published date.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>film_date</th>\n",
       "      <th>published_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006-02-24</td>\n",
       "      <td>2006-06-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006-02-24</td>\n",
       "      <td>2006-06-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006-02-23</td>\n",
       "      <td>2006-06-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006-02-25</td>\n",
       "      <td>2006-06-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2006-02-21</td>\n",
       "      <td>2006-06-27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    film_date published_date\n",
       "0  2006-02-24     2006-06-26\n",
       "1  2006-02-24     2006-06-26\n",
       "2  2006-02-23     2006-06-26\n",
       "3  2006-02-25     2006-06-26\n",
       "4  2006-02-21     2006-06-27"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ted['film_date'] = ted['film_date'].apply(lambda x: datetime.date.fromtimestamp(int(x)))\n",
    "ted['published_date'] = ted['published_date'].apply(lambda x: datetime.date.fromtimestamp(int(x)))\n",
    "ted['film_month'] = ted['film_date'].apply(lambda x: x.month)\n",
    "ted['pub_month'] = ted['published_date'].apply(lambda x: x.month)\n",
    "ted['film_weekday'] = ted['film_date'].apply(lambda x: x.weekday()) # Monday: 0, Sunday: 6\n",
    "ted['pub_weekday'] = ted['published_date'].apply(lambda x: x.weekday())\n",
    "ted[['film_date','published_date']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TED users can give ratings to each talk. There are 14 possible ratings and they will be categorized as positive, negative and neutral:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Positive: 'Beautiful', 'Courageous', 'Fascinating', 'Funny', 'Informative', 'Ingenious', 'Inspiring', 'Jaw-dropping', 'Persuasive'\n",
    "Negative: 'Confusing', 'Longwinded', 'Obnoxious', 'Unconvincing'\n",
    "Neutral: 'OK'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we define a \"popular\" TED talk by its ratio of positive to negative ratings (which we call it \"popularity ratio\" here). If the popularity ratio is above 5, it is defined as \"Popular\", otherwise it is \"Not Popular\". Transformation is made to avoid \"divided by zero\" error. The following code is adopted from this kernel to convert 'ratings' column (a JSON object) into columns of each rating"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "ted['ratings']=ted['ratings'].str.replace(\"'\",'\"')\n",
    "ted=ted.merge(ted.ratings.apply(lambda x: pd.Series(pd.read_json(x)['count'].values,index=pd.read_json(x)['name'])), \n",
    "            left_index=True, right_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of Not Popular talks:  301\n",
      "Ratio of Popular talks: 0.8766\n"
     ]
    }
   ],
   "source": [
    "Positive = ['Beautiful', 'Courageous', 'Fascinating', 'Funny', 'Informative', 'Ingenious', 'Inspiring', 'Jaw-dropping', 'Persuasive']\n",
    "Negative = ['Confusing', 'Longwinded', 'Obnoxious', 'Unconvincing']\n",
    "ted['positive']=ted.loc[:,Positive].sum(axis=1)+1\n",
    "ted['negative']=ted.loc[:,Negative].sum(axis=1)+1\n",
    "ted['pop_ratio']=ted['positive']/ted['negative']\n",
    "ted.loc[:,'Popular'] = ted['pop_ratio'].apply (lambda x: 1 if x >5 else 0)\n",
    "\n",
    "print (\"No. of Not Popular talks: \", len(ted[ted['Popular']==0]))\n",
    "# print (\"Ratio of Popular talks: {:.4f}\".format(len(ted[ted['Popular']==1])/ float(len(ted))))\n",
    "overall_mean_popular = np.mean(ted.Popular)\n",
    "print (\"Ratio of Popular talks: {:.4f}\".format(overall_mean_popular))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1125.38x1080 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nums = ['comments', 'duration', 'languages', 'num_speaker', 'views']\n",
    "sns.pairplot(ted, vars=nums, hue='Popular', hue_order = [1,0], diag_kind='kde', height=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ratings = ['Funny', 'Beautiful', 'Ingenious', 'Courageous', 'Longwinded', 'Confusing', 'Informative', 'Fascinating', 'Unconvincing', \n",
    "           'Persuasive', 'Jaw-dropping', 'OK', 'Obnoxious', 'Inspiring', 'Popular']\n",
    "plt.figure(figsize=(10,8))\n",
    "sns.heatmap(ted[ratings].corr(), annot=True, cmap='RdBu');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we do count vectorizer on 'speaker_occupation'. Before that, some data cleaning is needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ted.loc[:,'occ'] = ted.speaker_occupation.copy()\n",
    "ted.occ = ted.occ.fillna('Unknown')\n",
    "ted.occ = ted.occ.str.replace('singer/songwriter', 'singer, songwriter')\n",
    "ted.occ = ted.occ.str.replace('singer-songwriter', 'singer, songwriter')\n",
    "count_vector2 = CountVectorizer(stop_words='english', min_df=20/len(ted))\n",
    "occ_array = count_vector2.fit_transform(ted.occ).toarray()\n",
    "occ_matrix = pd.DataFrame(occ_array, columns = count_vector2.get_feature_names())\n",
    "all_occ = occ_matrix.columns\n",
    "occ_matrix = pd.concat([occ_matrix, ted.Popular], axis=1)\n",
    "by_occ = dict()\n",
    "for col in all_occ:\n",
    "    by_occ[col]=occ_matrix.groupby(col)['Popular'].mean()[1] - overall_mean_popular\n",
    "occ_rank = pd.DataFrame.from_dict(by_occ, orient='index')\n",
    "occ_rank.columns = ['pop_rate_diff']\n",
    "\n",
    "plt.figure(figsize=(16,7))\n",
    "plt.subplot(121)\n",
    "bar_2 = occ_rank.sort_values(by='pop_rate_diff', ascending=False)[:10]\n",
    "sns.barplot(x=bar_2.pop_rate_diff, y=bar_2.index, color='blue')\n",
    "plt.title('10 Most Popular Occupation Keywords', fontsize=14)\n",
    "plt.xlabel('Ratio of Popular Talk (Net of Mean)')\n",
    "plt.yticks(fontsize=12)\n",
    "plt.subplot(122)\n",
    "bar_1 = occ_rank.sort_values(by='pop_rate_diff')[:10]\n",
    "sns.barplot(x=bar_1.pop_rate_diff, y=bar_1.index, color='red')\n",
    "plt.title('10 Most Unpopular Occupation Keywords', fontsize=14)\n",
    "plt.xlabel('Ratio of Popular Talk (Net of Mean)')\n",
    "plt.yticks(fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of non-Ted talks that we removed were: 111\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of non-Ted talks that we removed were:\", len(df) - len(ted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Structure of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import pearsonr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5309387006213678"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr, _ = pearsonr(df['comments'], df['views']); corr # As can be seen, not much of a correlation between the two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5289031736657247"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if we include all the talks will the correlation between comments and views increase or decrease?\n",
    "\n",
    "corr, _ = pearsonr(ted['comments'], ted['views']); corr # it decreases! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Word Cloud for popular and nonpopular talks. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'wordcloud'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-d21b4fb3deb1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mwordcloud\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mWordCloud\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mSTOPWORDS\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mnltk\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mFreqDist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mword_tokenize\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mstopwords\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mSTOPWORDS\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m15\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m12\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'wordcloud'"
     ]
    }
   ],
   "source": [
    "from wordcloud import WordCloud, STOPWORDS\n",
    "from nltk import FreqDist, word_tokenize\n",
    "stopwords = set(STOPWORDS)\n",
    "\n",
    "plt.figure(figsize=(15,12))\n",
    "\n",
    "plt.subplot(121)\n",
    "word_pos = FreqDist(w for w in word_tokenize(' '.join(ted.loc[ted.Popular==1, 'title']).lower()) if (w not in stopwords) & (w.isalpha()))\n",
    "wordcloud = WordCloud(background_color = 'white', height=300, max_words=100).generate_from_frequencies(word_pos)\n",
    "plt.imshow(wordcloud)\n",
    "plt.title(\"Wordcloud for Title - Popular\", fontsize=16)\n",
    "plt.axis(\"off\")\n",
    "\n",
    "plt.subplot(122)\n",
    "word_neg = FreqDist(w for w in word_tokenize(' '.join(ted.loc[ted.Popular==0, 'title']).lower()) if (w not in stopwords) & (w.isalpha()))\n",
    "wordcloud = WordCloud(background_color = 'white', height=300, max_words=100).generate_from_frequencies(word_neg)\n",
    "plt.imshow(wordcloud)\n",
    "plt.title(\"Wordcloud for Title - Unpopular\", fontsize=16)\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Popular classification prediction model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will build a prediction model to prediction which talks are popular, starting with tags, speaker occupations, title and description. As we are having a problem of highly unbalanced class, we only predict a talk to be 'Popular' if the probability of having a 'Popular' label is above 65%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tag_matrix' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-b63c7be7eb95>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mted\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mPopular\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mocc_matrix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Popular'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtag_matrix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Popular'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'tag_matrix' is not defined"
     ]
    }
   ],
   "source": [
    "y = ted.Popular\n",
    "x = pd.concat([occ_matrix.drop('Popular', axis=1), tag_matrix.drop('Popular', axis=1)], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_comments' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-23-88755b61e695>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf_comments\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdf_views\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.25\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m36\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'df_comments' is not defined"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(df_comments, df_views, test_size=0.25, random_state=36)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write function on training and testing\n",
    "from sklearn.metrics import confusion_matrix, fbeta_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import make_scorer\n",
    "from time import time\n",
    "\n",
    "def train_predict(clf, parameters):\n",
    "        \n",
    "    clf.fit(x_train, y_train)\n",
    "    scorer = make_scorer(fbeta_score, beta=1)\n",
    "\n",
    "    # 5-fold cross validation\n",
    "    start = time()\n",
    "\n",
    "    grid_obj = GridSearchCV(clf, parameters, cv=5, scoring=scorer)\n",
    "    grid_fit = grid_obj.fit(x_train, y_train)\n",
    "    best_clf = grid_fit.best_estimator_\n",
    "    best_prob_train = best_clf.predict_proba(x_train)\n",
    "    best_prob = best_clf.predict_proba(x_test)\n",
    "    best_pred_train = (best_prob_train[:,1]>0.65)*1\n",
    "    best_pred = (best_prob[:,1]>0.65)*1\n",
    "\n",
    "    end = time()\n",
    "\n",
    "    run_time = end - start\n",
    "\n",
    "    # Report results\n",
    "    print (clf.__class__.__name__ + \":\")\n",
    "    print (\"Accuracy score on training data (optimized by grid-search CV): {:.4f}\".format(best_clf.score(x_train, y_train)))\n",
    "    print (\"Accuracy score on testing data (optimized by grid-search CV): {:.4f}\".format(best_clf.score(x_test, y_test)))\n",
    "    print (\"F1-score on training data (optimized by grid-search CV): {:.4f}\".format(fbeta_score(y_train, best_pred_train, beta = 1)))\n",
    "    print (\"F1-score on testing data (optimized by grid-search CV): {:.4f}\".format(fbeta_score(y_test, best_pred, beta = 1)))\n",
    "    print (\"Parameters: \", grid_fit.best_params_)\n",
    "    # print (confusion_matrix(y_test, best_predictions))\n",
    "    print (\"Total runtime: {:.4f} seconds\".format(run_time))\n",
    "    return best_prob_train, best_prob, best_pred_train, best_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "clf = RandomForestClassifier(random_state = 108)\n",
    "parameters = {'n_estimators': range(10,21,2), 'max_features': ['auto', 'log2'], 'min_samples_split': range(3, 7)}\n",
    "rf_prob_train, rf_prob, rf_pred_train, rf_pred = train_predict(clf, parameters)\n",
    "# train_predict(clf, parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(confusion_matrix(y_train, rf_pred_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(confusion_matrix(y_test, rf_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TRAINING AND TEST SETS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_comments = df['comments']; df_views = df['views']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       4553\n",
       "1        265\n",
       "2        124\n",
       "3        200\n",
       "4        593\n",
       "        ... \n",
       "2545      17\n",
       "2546       6\n",
       "2547      10\n",
       "2548      32\n",
       "2549       8\n",
       "Name: comments, Length: 2550, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_comments"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       47227110\n",
       "1        3200520\n",
       "2        1636292\n",
       "3        1697550\n",
       "4       12005869\n",
       "          ...   \n",
       "2545      450430\n",
       "2546      417470\n",
       "2547      375647\n",
       "2548      419309\n",
       "2549      391721\n",
       "Name: views, Length: 2550, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_views"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2040\n",
      "510\n",
      "2040\n",
      "510\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(df_comments, df_views, test_size=0.2, random_state=1)\n",
    "\n",
    "for set in [X_train, X_test, y_train, y_test]:\n",
    "    print( len(set))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Building a neural network to predict views"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install --upgrade keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install --upgrade tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import required packages\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation\n",
    "from keras.layers import Dropout\n",
    "from keras.metrics import MeanSquaredError, RootMeanSquaredError, MeanAbsolutePercentageError, MeanAbsoluteError, MeanSquaredLogarithmicError, CosineSimilarity\n",
    "from keras import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from keras.metrics import MeanSquaredError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(b'Hello, TensorFlow!', shape=(), dtype=string)\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "hello = tf.constant('Hello, TensorFlow!')\n",
    "\n",
    "print(hello)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Simple neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# comments as input and views as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "51/51 - 1s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 2/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 3/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 4/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 5/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 6/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 7/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.5000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 8/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 9/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 10/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 11/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 12/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 13/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 14/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.6250 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 15/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 16/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 17/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 18/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 19/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 20/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 21/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 22/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 23/100\n",
      "51/51 - 0s - loss: 9954507358208.0000 - mean_squared_error: 9954507358208.0000 - root_mean_squared_error: 3155076.5000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 24/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 25/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 26/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 27/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.6250 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 28/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 29/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 30/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 31/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 32/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 33/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 34/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 35/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 36/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 37/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 38/100\n",
      "51/51 - 0s - loss: 9954502115328.0000 - mean_squared_error: 9954502115328.0000 - root_mean_squared_error: 3155075.5000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 39/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 40/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 41/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 42/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 43/100\n",
      "51/51 - 0s - loss: 9954502115328.0000 - mean_squared_error: 9954502115328.0000 - root_mean_squared_error: 3155075.5000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 44/100\n",
      "51/51 - 0s - loss: 9954502115328.0000 - mean_squared_error: 9954502115328.0000 - root_mean_squared_error: 3155075.5000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 45/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 46/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 47/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 48/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 49/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 50/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 51/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 52/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.5000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 53/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.6250 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 54/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 55/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 56/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 57/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 58/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 59/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 60/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 61/100\n",
      "51/51 - 0s - loss: 9954502115328.0000 - mean_squared_error: 9954502115328.0000 - root_mean_squared_error: 3155075.5000 - mean_absolute_error: 1745858.5000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 62/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 63/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 64/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 65/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 66/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 67/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 68/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2853 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 69/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 70/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 71/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 72/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 73/100\n",
      "51/51 - 0s - loss: 9954503163904.0000 - mean_squared_error: 9954503163904.0000 - root_mean_squared_error: 3155075.7500 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 74/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 75/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 76/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 77/100\n",
      "51/51 - 0s - loss: 9954502115328.0000 - mean_squared_error: 9954502115328.0000 - root_mean_squared_error: 3155075.5000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 78/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 79/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 80/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 81/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745857.6250 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 82/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 83/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 84/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 85/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 86/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 87/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 88/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 89/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 90/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 91/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 92/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 93/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.7500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 94/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 95/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.6250 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 96/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745857.8750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 97/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 98/100\n",
      "51/51 - 0s - loss: 9954506309632.0000 - mean_squared_error: 9954506309632.0000 - root_mean_squared_error: 3155076.2500 - mean_absolute_error: 1745858.0000 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 99/100\n",
      "51/51 - 0s - loss: 9954504212480.0000 - mean_squared_error: 9954504212480.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "Epoch 100/100\n",
      "51/51 - 0s - loss: 9954505261056.0000 - mean_squared_error: 9954505261056.0000 - root_mean_squared_error: 3155076.0000 - mean_absolute_error: 1745858.2500 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 196.2854 - val_loss: 9102535163904.0000 - val_mean_squared_error: 9102535163904.0000 - val_root_mean_squared_error: 3017040.7500 - val_mean_absolute_error: 1588058.3750 - val_mean_absolute_percentage_error: 100.0000 - val_mean_squared_logarithmic_error: 195.0409\n",
      "16/16 - 0s - loss: 6484385595392.0000 - mean_squared_error: 6484385595392.0000 - root_mean_squared_error: 2546445.7500 - mean_absolute_error: 1634295.3750 - mean_absolute_percentage_error: 100.0000 - mean_squared_logarithmic_error: 195.9891\n",
      "Performance on Test set: <zip object at 0x0000019CEFAE4E00>\n"
     ]
    }
   ],
   "source": [
    "# Specify the modelmodel = Sequential()\n",
    "model_1_neuron = Sequential()\n",
    "model_1_neuron.add(Dense(1, input_dim = 1, activation = \"relu\"))\n",
    "model_1_neuron.compile(loss='mse', optimizer='adam', \n",
    "          #metrics = [\"mse\", \"RMSE\", \"mape\"])\n",
    "            metrics = [ MeanSquaredError(), RootMeanSquaredError(),MeanAbsoluteError(), MeanAbsolutePercentageError(), MeanSquaredLogarithmicError()])\n",
    "\n",
    "\n",
    "# Fit the model, or in other words, train the model. \n",
    "\n",
    "#Train the model and make predictions\n",
    "history = model_1_neuron.fit(X_train, y_train, epochs=100 , batch_size=32, verbose = 2, validation_split=0.2)\n",
    "score = model_1_neuron.evaluate(X_test, y_test, verbose = 2)\n",
    "\n",
    "#Make predictions from the trained model\n",
    "predictions = model_1_neuron.predict(X_test)\n",
    "\n",
    "#print performance and loss\n",
    "print(\"Performance on Test set:\", zip(model_1_neuron.metrics_names, score))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2546445.6479308447"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(np.mean((np.array(y_test) - predictions)**2))**.5 # we got 2545996.0559998746 04 April 2021"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# \"Plot Loss\"\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# \"Plot Loss\"\n",
    "#plt.plot(history.history['MeanSquaredError'])\n",
    "#plt.plot(history.history['val_loss'])\n",
    "#plt.title('model Metrics')\n",
    "#plt.ylabel('loss')\n",
    "#plt.xlabel('epoch')\n",
    "#plt.legend(['train', 'validation'], loc='upper right')\n",
    "#plt.show()\n",
    "\n",
    "# plot metrics\n",
    "plt.plot(history.history['mean_squared_error'])\n",
    "#plt.plot(history.history['mean_absolute_error'])\n",
    "#plt.plot(history.history['mean_absolute_percentage_error'])\n",
    "#pyplot.plot(history.history['cosine_proximity'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot metrics\n",
    "plt.plot(history.history['mean_absolute_error'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot metrics\n",
    "plt.plot(history.history['mean_squared_logarithmic_error'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot metrics\n",
    "plt.plot(history.history['mean_squared_error'])\n",
    "plt.plot(history.history['mean_absolute_error'])\n",
    "plt.plot(history.history['mean_squared_logarithmic_error'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify the modelmodel = Sequential()\n",
    "model_5_neuron = Sequential()\n",
    "model_5_neuron.add(Dense(5, input_dim = 1, activation = \"relu\")) #Input layer, Why is number of neurons and input_dim different things\n",
    "model_5_neuron.add(Dense(3,activation = \"relu\")) # Hidden layer\n",
    "model_5_neuron.add(Dense(1,activation = \"relu\")) # Output layer\n",
    "model_5_neuron.compile(loss='mse', optimizer='adam',\n",
    "metrics=['mse'])\n",
    "\n",
    "# Fit the model, or in other words, train the model. \n",
    "\n",
    "#Train the model and make predictions\n",
    "model_5_neuron.fit(X_train, y_train, epochs=100 ,batch_size=32)\n",
    "#Make predictions from the trained model\n",
    "predictions = model_5_neuron.predict(X_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(np.mean((np.array(y_test) - predictions)**2))**.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify the modelmodel = Sequential()\n",
    "model_1_neuron = Sequential()\n",
    "model_1_neuron.add(Dense(1, input_dim = 1, activation = \"relu\"))\n",
    "#model_1_neuron.add(Dropout(rate = 0.1,seed=100))\n",
    "model_1_neuron.add(Dense(1,activation = \"relu\"))\n",
    "model_1_neuron.compile(loss='mse', optimizer='adam',\n",
    "metrics=['mse'])\n",
    "\n",
    "# Fit the model, or in other words, train the model. \n",
    "\n",
    "#Train the model and make predictions\n",
    "model_1_neuron.fit(X_train, y_train, epochs=10, batch_size=32)\n",
    "#Make predictions from the trained model\n",
    "predictions = model_1_neuron.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(np.mean((np.array(y_test) - predictions)**2))**.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model 3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(5, input_dim = 1, activation = \"relu\"))\n",
    "model.add(Dropout(rate = 0.1,seed=100))\n",
    "model.add(Dense(1,activation = \"relu\"))\n",
    "model.compile(loss='mse', optimizer='adam',\n",
    "metrics=['mse'])\n",
    "\n",
    "#Train the model and make predictions\n",
    "model.fit(X_train, y_train, epochs=100, batch_size=100)\n",
    "#Make predictions from the trained model\n",
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(np.mean((np.array(y_test) - predictions)**2))**.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With His Will, it now begins. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code from the book"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#score = model.evaluate(data,labels, verbose=0)\n",
    "# print \"Optimiser: \", optimiser\n",
    "# print \"Before Training:\", zip(model.metrics_names, score)\n",
    "# model.fit(data, labels, nb_epoch=10, batch_size=32, verbose=0)\n",
    "# score = model.evaluate(data,labels, verbose=0)\n",
    "# print \"After Training:\", zip(model.metrics_names, score) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Sequential' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-23-352d11dcb12e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     24\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     25\u001b[0m \u001b[1;31m# Running function for different optimizers\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 26\u001b[1;33m \u001b[0mtrain_given_optimiser\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"sgd\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     27\u001b[0m \u001b[0mtrain_given_optimiser\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"rmsprop\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     28\u001b[0m \u001b[0mtrain_given_optimiser\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"adagrad\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-23-352d11dcb12e>\u001b[0m in \u001b[0;36mtrain_given_optimiser\u001b[1;34m(optimiser)\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mtrain_given_optimiser\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moptimiser\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m  \u001b[0mmodel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m  \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDense\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput_dim\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m  \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mActivation\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mactivation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'relu'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Sequential' is not defined"
     ]
    }
   ],
   "source": [
    "#import numpy as np\n",
    "#from keras.models import Sequential\n",
    "#from keras.layers import Dense, Activation\n",
    "\n",
    "def train_given_optimiser(optimiser):\n",
    "    \n",
    " model = Sequential()\n",
    " model.add(Dense(2, input_dim=1))\n",
    " model.add(Activation(activation='relu'))\n",
    "\n",
    "\n",
    " model.compile(optimizer=optimiser, loss='msle', metrics=['mse', 'mape', RootMeanSquaredError(), 'msle' ])\n",
    "    \n",
    " score = model.evaluate(X_train,y_train, verbose=2)\n",
    "\n",
    " print (\"Optimiser: \", optimiser)\n",
    " print (\"Before Training:\", list(zip(model.metrics_names, score)))\n",
    " model.fit(X_train,y_train, epochs=10, batch_size=32, verbose=0)\n",
    " score = model.evaluate(X_test, y_test, verbose=0)\n",
    " print (\"After Training:\", list(zip(model.metrics_names, score)))\n",
    " print (score)\n",
    " print (model.metrics_names)\n",
    " print (\" \\n \")\n",
    "    \n",
    "# Running function for different optimizers \n",
    "train_given_optimiser(\"sgd\")\n",
    "train_given_optimiser(\"rmsprop\")\n",
    "train_given_optimiser(\"adagrad\")\n",
    "train_given_optimiser(\"adadelta\")\n",
    "train_given_optimiser(\"adam\")\n",
    "train_given_optimiser(\"adamax\")\n",
    "train_given_optimiser(\"nadam\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that outputs the variables to store in the resutls data frame above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>MSA_train</th>\n",
       "      <th>MSA_test</th>\n",
       "      <th>mse_train</th>\n",
       "      <th>mse_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [model_num, optimizer, loss_fn, activation_fn, epochs, batch_size, num_hiddenlayer, neurons_in_hiddenlayer, num_dropout_layers, MSA_train, MSA_test, mse_train, mse_test]\n",
       "Index: []"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Sequential' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-24-4d858929eb86>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     64\u001b[0m     \u001b[1;32mreturn\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresults_df\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 66\u001b[1;33m \u001b[0mmodel_results\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     67\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-24-4d858929eb86>\u001b[0m in \u001b[0;36mmodel_results\u001b[1;34m(model_num, optimizer, loss_fn, activation_fn, output_activation_fn, epochs, batch_size, neurons_in_inputlayer, num_hiddenlayer, neurons_in_hiddenlayer, num_dropout_layers, verbose)\u001b[0m\n\u001b[0;32m     17\u001b[0m     \u001b[1;31m# The Model\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 19\u001b[1;33m     \u001b[0mmodel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mSequential\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     20\u001b[0m     \u001b[1;31m# Input Layer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mDense\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mneurons_in_inputlayer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput_dim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mactivation\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mactivation_fn\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'Sequential' is not defined"
     ]
    }
   ],
   "source": [
    "def model_results(model_num, \n",
    "                  optimizer = 'adam', \n",
    "                  loss_fn = 'mse', \n",
    "                  activation_fn = 'relu', \n",
    "                  output_activation_fn = 'relu', \n",
    "                  \n",
    "                  epochs = 100, \n",
    "                  batch_size =32, \n",
    "                  \n",
    "                  neurons_in_inputlayer = 5, \n",
    "                  num_hiddenlayer = 1,  \n",
    "                  neurons_in_hiddenlayer = 2, \n",
    "                  num_dropout_layers = 0,\n",
    "                  \n",
    "                  verbose = 0):  \n",
    "    \n",
    "    # The Model\n",
    "    \n",
    "    model = Sequential()\n",
    "    # Input Layer\n",
    "    model.add(Dense(neurons_in_inputlayer, input_dim = 1, activation = activation_fn))\n",
    "    # Dropout Layer\n",
    "    #model.add(Dropout(rate = 0.1,seed=100))\n",
    "    # Hidden Layers\n",
    "    model.add(Dense(neurons_in_hiddenlayer,activation = activation_fn))\n",
    "    # Output Layer\n",
    "    model.add(Dense(1,activation = output_activation_fn))\n",
    "\n",
    "    \n",
    "    # Compiling the model\n",
    "    model.compile(loss=loss_fn, optimizer=optimizer,\n",
    "    metrics=['mse', 'mae', 'mape', CosineSimilarity(), RootMeanSquaredError() , MeanSquaredLogarithmicError() ])\n",
    "    # Train the model and make predictions\n",
    "    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose = verbose)\n",
    "    # Evaluate the model\n",
    "    score = model.evaluate(X_test, y_test, verbose = verbose)\n",
    "    \n",
    "    # Make predictions from the trained model\n",
    "    #predictions = model.predict(X_test)\n",
    "    \n",
    "    # Store results\n",
    "    dict = {'model_num':[model_num],\n",
    "        'optimizer':[ optimizer],\n",
    "        'loss_fn':[loss_fn],\n",
    "        'activation_fn':[activation_fn],\n",
    "        'output_activation_fn':[output_activation_fn],\n",
    "        'epochs':[epochs],\n",
    "        'batch_size':[batch_size],\n",
    "        'neurons_in_inputlayer':[neurons_in_inputlayer],\n",
    "        'num_hiddenlayer':[num_hiddenlayer],\n",
    "        'neurons_in_hiddenlayer':[neurons_in_hiddenlayer],\n",
    "        'num_dropout_layers':[num_dropout_layers],            \n",
    "        'loss':[score[0]],\n",
    "        'mse_test':[score[1]],\n",
    "        'mae_test':[score[2]],\n",
    "        'mape_test':[score[3]],\n",
    "        'cosine_similarity_test':[score[4]],\n",
    "        'rmse_test':[score[5]],\n",
    "        'msle_test':[score[6]] \n",
    "       }\n",
    "\n",
    "    results_df = pd.DataFrame(dict)\n",
    "    #print (\"After Training:\", list(zip(model.metrics_names, score)))\n",
    "    return(results_df)\n",
    "\n",
    "model_results(0)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write the loop that trains the model and stores the performance of the models. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number_parameters : 4608\n"
     ]
    }
   ],
   "source": [
    "# model_num\n",
    "#optimizer_list = [\"adam\", \"nadam\", \"sgd\"]\n",
    "#loss_fn_list = [\"mse\", \"mape\", \"mae\", \"msle\"]\n",
    "#activation_fn_list = [\"relu\", \"selu\", \"exponential\"]\n",
    "#epochs_list = [1, 10, 100]\n",
    "#batch_size_list = [1, 10, 32, 100]\n",
    "#num_hiddenlayer_list = [1]\n",
    "#neurons_in_hiddenlayer_list = [1, 2, 4, 7, 10]\n",
    "##neurons_in_inputlayer_list = [1, 2, 4, 7, 10]\n",
    "#num_dropout_layers_list = [0]\n",
    "\n",
    "# Total number of parameters: \n",
    "#number_parameters = len(optimizer_list) * len(loss_fn_list) * len(activation_fn_list) * len(epochs_list) * len(batch_size_list) * len(num_hiddenlayer_list) * len(neurons_in_inputlayer_list) * len(num_dropout_layers_list) \n",
    " \n",
    "#print(\"number_parameters :\", number_parameters)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>output_activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [model_num, optimizer, loss_fn, activation_fn, output_activation_fn, epochs, batch_size, neurons_in_inputlayer, num_hiddenlayer, neurons_in_hiddenlayer, num_dropout_layers, loss, mse_test, mae_test, mape_test, cosine_similarity_test, rmse_test, msle_test]\n",
       "Index: []"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict = {'model_num':[],\n",
    "        'optimizer':[ ],\n",
    "        'loss_fn':[],\n",
    "        'activation_fn':[],\n",
    "        'output_activation_fn':[],\n",
    "        'epochs':[],\n",
    "        'batch_size':[],\n",
    "        'neurons_in_inputlayer':[],\n",
    "        'num_hiddenlayer':[],\n",
    "        'neurons_in_hiddenlayer':[],\n",
    "        'num_dropout_layers':[],            \n",
    "        'loss':[],\n",
    "        'mse_test':[],\n",
    "        'mae_test':[],\n",
    "        'mape_test':[],\n",
    "        'cosine_similarity_test':[],\n",
    "        'rmse_test':[],\n",
    "        'msle_test':[] \n",
    "}\n",
    "\n",
    "results_df = pd.DataFrame(dict)\n",
    "results_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number_parameters : 4608\n",
      "Percent Complete 0.021701388888888888 %\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number_parameters : 1152\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number_parameters : 864\n",
      "864\n"
     ]
    }
   ],
   "source": [
    "optimizer_list = [\"nadam\", \"adam\"]\n",
    "loss_fn_list = [\"mse\", \"mae\", \"msle\"]\n",
    "activation_fn_list = [\"relu\", \"selu\"]\n",
    "epochs_list = [50, 100]\n",
    "batch_size_list = [1, 10, 32, 100]\n",
    "num_hiddenlayer_list = [1]\n",
    "neurons_in_hiddenlayer_list = [1, 5, 10]\n",
    "neurons_in_inputlayer_list = [1, 5, 10]\n",
    "num_dropout_layers_list = [0]\n",
    "\n",
    "number_parameters = len(optimizer_list) * len(loss_fn_list) * len(activation_fn_list) * len(epochs_list) * len(batch_size_list) * len(neurons_in_inputlayer_list) * len(neurons_in_hiddenlayer_list) * len(num_dropout_layers_list) \n",
    "print(\"number_parameters :\", number_parameters)\n",
    "\n",
    "print(2*3*2*2*4*3*3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number_parameters : 864\n",
      "864\n",
      "i: 0\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          0     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 1\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          1     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.659994e+12  4.659994e+12  1238939.875   69.78318   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2158702.0   2.553004  \n",
      " \n",
      " \n",
      "i: 2\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          2     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.141292e+12  4.141292e+12  1048607.75  60.543694   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2035016.625   1.189505  \n",
      " \n",
      " \n",
      "i: 3\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          3     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 4\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          4     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 5\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          5     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.268128e+12  4.268128e+12  1.019122e+06  61.597965   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2065944.75    0.94437  \n",
      " \n",
      " \n",
      "i: 6\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          6     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 7\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          7     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 8\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          8     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 9\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0          9     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 10\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         10     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 11\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         11     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.676805e+12  5.676805e+12  1468912.375  87.146706   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2382604.75   6.486502  \n",
      " \n",
      " \n",
      "i: 12\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         12     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 13\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         13     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.173971e+12  6.173971e+12  1573873.375  95.330574   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2484747.75  12.476266  \n",
      " \n",
      " \n",
      "i: 14\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         14     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 15\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         15     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.911581e+12  5.911581e+12  1519064.875   91.09549   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2431374.25   8.466087  \n",
      " \n",
      " \n",
      "i: 16\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         16     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.354110e+12  5.354110e+12  1402682.5  81.750336   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2313895.0   4.791937  \n",
      " \n",
      " \n",
      "i: 17\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         17     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.498686e+12  4.498686e+12  1197373.75   67.21714   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2121010.5   2.247699  \n",
      " \n",
      " \n",
      "i: 18\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         18     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 19\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         19     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 20\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         20     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 21\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         21     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.359070e+12  6.359070e+12  1610459.75  98.161514   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2521719.5  19.788982  \n",
      " \n",
      " \n",
      "i: 22\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         22     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 23\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         23     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 24\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         24     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.371500e+12  6.371500e+12  1612855.0  98.346313   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2524183.0  20.726479  \n",
      " \n",
      " \n",
      "i: 25\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         25     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 26\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         26     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 27\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         27     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.477886e+12  6.477886e+12  1633074.625  99.905815   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545169.25  54.515118  \n",
      " \n",
      " \n",
      "i: 28\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         28     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.474092e+12  6.474092e+12  1632361.5  99.850815   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544423.75  48.006172  \n",
      " \n",
      " \n",
      "i: 29\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         29     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.459333e+12  6.459333e+12  1629583.5  99.636635   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2541521.75  36.576866  \n",
      " \n",
      " \n",
      "i: 30\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         30     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.476696e+12  6.476696e+12  1632852.625  99.888809   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544935.25  52.163158  \n",
      " \n",
      " \n",
      "i: 31\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         31     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 32\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         32     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 33\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         33     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 34\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         34     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 35\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         35     nadam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 36\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         36     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 37\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         37     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 38\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         38     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.499933e+12  4.499933e+12  1017241.125  63.900551   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2121304.75    0.81727  \n",
      " \n",
      " \n",
      "i: 39\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         39     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 40\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         40     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 41\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         41     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.460493e+12  4.460493e+12  1016492.875  63.490242   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2111988.0   0.831628  \n",
      " \n",
      " \n",
      "i: 42\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         42     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.529966e+12  4.529966e+12  1.016716e+06  64.192001   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2128371.75    0.79674  \n",
      " \n",
      " \n",
      "i: 43\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         43     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 44\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         44     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.531584e+12  4.531584e+12  1015858.625  64.193352   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2128751.75   0.788465  \n",
      " \n",
      " \n",
      "i: 45\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         45     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.632511e+12  5.632511e+12  1459756.25  86.428581   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2373291.25    6.22878  \n",
      " \n",
      " \n",
      "i: 46\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         46     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 47\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         47     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 48\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         48     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 49\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         49     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 50\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         50     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 51\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         51     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 52\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         52     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.249921e+12  4.249921e+12  1116915.75  62.808647   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2061533.75    1.66881  \n",
      " \n",
      " \n",
      "i: 53\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         53     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.155167e+12  4.155167e+12  1055159.625  60.974506   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2038422.75   1.253569  \n",
      " \n",
      " \n",
      "i: 54\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         54     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 55\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         55     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 56\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         56     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 57\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         57     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.100997e+12  6.100997e+12  1559121.375  94.200951   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2470019.75  11.075223  \n",
      " \n",
      " \n",
      "i: 58\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         58     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 59\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         59     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 60\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         60     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 61\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         61     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 62\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         62     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.699860e+12  4.699860e+12  1251512.5  70.822433   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2167916.0   2.749042  \n",
      " \n",
      " \n",
      "i: 63\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         63     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 64\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         64     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 65\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         65     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 66\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         66     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 67\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         67     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 68\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         68     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.151328e+12  6.151328e+12  1569441.5   95.00174   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2480187.25  12.074749  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 69\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         69     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 70\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         70     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 71\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         71     nadam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 72\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         72     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.532056e+12  4.532056e+12  1204931.75   67.52037   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2128862.5   2.259932  \n",
      " \n",
      " \n",
      "i: 73\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         73     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.166494e+12  4.166494e+12  1078982.5  61.084835   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2041199.25    1.38972  \n",
      " \n",
      " \n",
      "i: 74\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         74     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.227988e+12  4.227988e+12  1022179.25   61.24324   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2056207.125   0.977235  \n",
      " \n",
      " \n",
      "i: 75\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         75     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.146614e+12  4.146614e+12  1040215.625  60.531181   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2036323.75   1.127816  \n",
      " \n",
      " \n",
      "i: 76\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         76     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.156870e+12  4.156870e+12  1076200.25  60.642876   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2038840.375   1.343847  \n",
      " \n",
      " \n",
      "i: 77\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         77     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.407025e+12  4.407025e+12  1011970.125  62.848953   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2099291.75   0.819733  \n",
      " \n",
      " \n",
      "i: 78\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         78     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.483881e+12  6.483881e+12  1634140.75  99.983025   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546346.75  80.373024  \n",
      " \n",
      " \n",
      "i: 79\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         79     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 80\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         80     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.412850e+12  4.412850e+12  1.010141e+06  62.874641   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2100678.5   0.801048  \n",
      " \n",
      " \n",
      "i: 81\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         81     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.483091e+12  6.483091e+12  1633898.75  99.956444   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546191.5  64.471611  \n",
      " \n",
      " \n",
      "i: 82\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         82     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.133679e+12  6.133679e+12  1565670.125  94.694092   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2476626.5  11.605965  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 83\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         83     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 84\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         84     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.774963e+12  5.774963e+12  1489273.25  88.783821   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2403115.25   7.223398  \n",
      " \n",
      " \n",
      "i: 85\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         85     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.983329e+12  5.983329e+12  1534355.5  92.269348   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2446084.5   9.254206  \n",
      " \n",
      " \n",
      "i: 86\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         86     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.521367e+12  4.521367e+12  1203575.875  67.603729   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2126350.75   2.298944  \n",
      " \n",
      " \n",
      "i: 87\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         87     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.467686e+12  5.467686e+12  1425937.75  83.641418   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2338308.5     5.3023  \n",
      " \n",
      " \n",
      "i: 88\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         88     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.761353e+12  5.761353e+12  1486246.625  88.524567   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2400282.0   7.072155  \n",
      " \n",
      " \n",
      "i: 89\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         89     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.279439e+12  4.279439e+12  1128076.75  63.287628   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2068680.625   1.733807  \n",
      " \n",
      " \n",
      "i: 90\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         90     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 91\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         91     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 92\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         92     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 93\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         93     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484356e+12  6.484356e+12  1634286.125  99.998993   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546440.0  136.649445  \n",
      " \n",
      " \n",
      "i: 94\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         94     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 95\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         95     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.117949e+12  6.117949e+12  1562423.75  94.440216   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2473448.75  11.289136  \n",
      " \n",
      " \n",
      "i: 96\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         96     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484354e+12  6.484354e+12  1634285.75  99.998955   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546439.5  135.662262  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 97\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         97     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.291099e+12  6.291099e+12  1597194.125  97.133636   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2508206.5  16.068693  \n",
      " \n",
      " \n",
      "i: 98\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         98     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 99\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0         99     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.474156e+12  6.474156e+12  1632376.375  99.852203   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544436.25  48.194866  \n",
      " \n",
      " \n",
      "i: 100\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        100     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 101\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        101     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.461843e+12  6.461843e+12  1630053.625  99.672638   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2542015.5  37.809616  \n",
      " \n",
      " \n",
      "i: 102\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        102     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.484370e+12  6.484370e+12  1634290.5  99.999481   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546442.5  150.435349  \n",
      " \n",
      " \n",
      "i: 103\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        103     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 104\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        104     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 105\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        105     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 106\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        106     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.393745e+12  6.393745e+12  1617092.75  98.670624   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2528585.5  22.672995  \n",
      " \n",
      " \n",
      "i: 107\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        107     nadam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 108\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        108     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 109\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        109     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 110\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        110     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 111\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        111     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.483375e+12  6.483375e+12  1633986.0  99.966019   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546247.25   68.49662  \n",
      " \n",
      " \n",
      "i: 112\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        112     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.495736e+12  4.495736e+12  1012175.125  63.775715   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2120315.0   0.775543  \n",
      " \n",
      " \n",
      "i: 113\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        113     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.535522e+12  4.535522e+12  1010304.75  64.180962   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2129676.5   0.739744  \n",
      " \n",
      " \n",
      "i: 114\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        114     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.483367e+12  6.483367e+12  1633983.75  99.965775   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546245.75  68.378624  \n",
      " \n",
      " \n",
      "i: 115\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        115     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.524763e+12  4.524763e+12  1.010792e+06  64.068657   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2127149.0   0.749142  \n",
      " \n",
      " \n",
      "i: 116\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        116     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 117\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        117     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 118\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        118     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 119\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        119     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 120\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        120     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484215e+12  6.484215e+12  1634243.25   99.99427   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546412.0  100.686577  \n",
      " \n",
      " \n",
      "i: 121\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        121     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.407100e+12  4.407100e+12  1170233.375  65.507851   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2099309.5    2.01684  \n",
      " \n",
      " \n",
      "i: 122\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        122     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.150986e+12  4.150986e+12  1056886.5  60.888721   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2037396.875   1.258365  \n",
      " \n",
      " \n",
      "i: 123\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        123     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.484214e+12  6.484214e+12  1634243.0   99.99424   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546412.0  100.610764  \n",
      " \n",
      " \n",
      "i: 124\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        124     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 125\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        125     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.338108e+12  4.338108e+12  1019260.375  62.352577   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2082812.5   0.924842  \n",
      " \n",
      " \n",
      "i: 126\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        126     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.483685e+12  6.483685e+12  1634081.125  99.976463   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546308.25  74.655907  \n",
      " \n",
      " \n",
      "i: 127\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        127     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 128\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        128     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.481018e+12  6.481018e+12  1633264.75  99.886772   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2545784.5  50.132217  \n",
      " \n",
      " \n",
      "i: 129\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        129     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.254903e+12  6.254903e+12  1589981.5  96.569366   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2500980.25  14.646037  \n",
      " \n",
      " \n",
      "i: 130\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        130     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.477528e+12  6.477528e+12  1632195.75  99.769287   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545098.75  40.622414  \n",
      " \n",
      " \n",
      "i: 131\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        131     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.296966e+12  4.296966e+12  1134788.875  63.752594   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2072912.375   1.804705  \n",
      " \n",
      " \n",
      "i: 132\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        132     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 133\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        133     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.484173e+12  6.484173e+12  1634230.5  99.992867   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546404.0  96.484001  \n",
      " \n",
      " \n",
      "i: 134\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        134     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.171899e+12  5.171899e+12  1363788.125  78.724564   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2274181.0   4.043276  \n",
      " \n",
      " \n",
      "i: 135\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        135     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.446711e+12  6.446711e+12  1627203.5    99.4534   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2539037.5  31.875595  \n",
      " \n",
      " \n",
      "i: 136\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        136     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484170e+12  6.484170e+12  1634229.25  99.992729   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546403.25  96.067139  \n",
      " \n",
      " \n",
      "i: 137\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        137     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.390424e+12  6.390424e+12  1616479.625   98.62529   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2527928.75  22.400343  \n",
      " \n",
      " \n",
      "i: 138\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        138     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484364e+12  6.484364e+12  1634288.75  99.999298   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546441.25  143.860962  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 139\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        139     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 140\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        140     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 141\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        141     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.387621e+12  6.387621e+12  1615911.5  98.578751   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2527374.25  22.040222  \n",
      " \n",
      " \n",
      "i: 142\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        142     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.052620e+12  6.052620e+12  1548947.875  93.399902   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2460207.25  10.208974  \n",
      " \n",
      " \n",
      "i: 143\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        143     nadam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.874421e+12  5.874421e+12  1510934.25  90.462891   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2423720.5    8.08037  \n",
      " \n",
      " \n",
      "i: 144\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        144     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 145\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        145     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 146\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        146     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 147\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        147     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 148\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        148     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 149\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        149     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 150\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        150     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1019807.875  4.457772e+12  1019807.875  63.541634   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2111343.5   0.864258  \n",
      " \n",
      " \n",
      "i: 151\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        151     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1016424.375  4.444893e+12  1016424.375  63.330929   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2108291.5    0.83951  \n",
      " \n",
      " \n",
      "i: 152\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        152     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 153\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        153     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 154\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        154     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 155\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        155     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 156\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        156     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 157\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        157     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 158\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        158     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 159\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        159     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1026816.25  4.362795e+12  1026816.25  62.874527   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2088730.625   0.992201  \n",
      " \n",
      " \n",
      "i: 160\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        160     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1040385.75  4.204476e+12  1040385.75  61.576328   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2050482.0   1.151033  \n",
      " \n",
      " \n",
      "i: 161\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        161     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 162\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        162     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 163\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        163     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 164\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        164     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1511717.625  5.876349e+12  1511717.625  90.558212   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2424118.25    8.20598  \n",
      " \n",
      " \n",
      "i: 165\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        165     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 166\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        166     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 167\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        167     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1458657.375  5.625002e+12  1458657.375  86.380882   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2371708.75   6.262774  \n",
      " \n",
      " \n",
      "i: 168\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        168     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 169\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        169     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 170\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        170     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 171\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        171     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 172\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        172     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 173\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        173     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1625103.5  6.435568e+12  1625103.5  99.292313   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2536842.0   29.09544  \n",
      " \n",
      " \n",
      "i: 174\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        174     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 175\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        175     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 176\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        176     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1618117.875  6.398841e+12  1618117.875  98.754044   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2529593.0  23.381323  \n",
      " \n",
      " \n",
      "i: 177\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        177     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 178\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        178     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1627005.5  6.445644e+12  1627005.5  99.438431   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2538827.25  31.592745  \n",
      " \n",
      " \n",
      "i: 179\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        179     nadam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 180\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        180     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 181\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        181     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 182\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        182     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1013257.125  4.423394e+12  1013257.125  63.045109   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2103186.75   0.822406  \n",
      " \n",
      " \n",
      "i: 183\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        183     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 184\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        184     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 185\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        185     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 186\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        186     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.007692e+06  4.388565e+12  1.007692e+06   62.56971   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2094890.125   0.793351  \n",
      " \n",
      " \n",
      "i: 187\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        187     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 188\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        188     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  993627.125  4.334520e+12  993627.125   61.77673   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2081951.0   0.714028  \n",
      " \n",
      " \n",
      "i: 189\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        189     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 190\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        190     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 191\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        191     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1026053.0  4.483617e+12  1026053.0  63.964874   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2117455.25   0.913664  \n",
      " \n",
      " \n",
      "i: 192\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        192     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 193\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        193     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 194\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        194     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 195\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        195     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 196\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        196     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.024036e+06  4.474350e+12  1.024036e+06  63.815643   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2115266.0   0.897553  \n",
      " \n",
      " \n",
      "i: 197\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        197     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 198\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        198     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 199\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        199     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1349807.0  5.100933e+12  1349807.0   77.79924   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2258524.5   3.907617  \n",
      " \n",
      " \n",
      "i: 200\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        200     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 201\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        201     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 202\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        202     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 203\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        203     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1051022.125  4.175482e+12  1051022.125  61.356247   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2043399.625   1.242406  \n",
      " \n",
      " \n",
      "i: 204\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        204     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 205\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        205     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1092222.625  4.196682e+12  1092222.625  62.050591   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2048580.375   1.533162  \n",
      " \n",
      " \n",
      "i: 206\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        206     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 207\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        207     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 208\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        208     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 209\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        209     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 210\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        210     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 211\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        211     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1534348.25  5.981657e+12  1534348.25  92.301323   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2445742.75   9.363256  \n",
      " \n",
      " \n",
      "i: 212\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        212     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1569261.375  6.150341e+12  1569261.375  94.989632   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2479988.25  12.066738  \n",
      " \n",
      " \n",
      "i: 213\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        213     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1569666.125  6.152281e+12  1569666.125  95.021873   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2480379.25  12.115336  \n",
      " \n",
      " \n",
      "i: 214\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        214     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 215\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        215     nadam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 216\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        216     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 217\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        217     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.018611e+06  4.446607e+12  1.018611e+06   63.40292   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2108697.75   0.858804  \n",
      " \n",
      " \n",
      "i: 218\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        218     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 219\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        219     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 220\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        220     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1014201.25  4.428901e+12  1014201.25  63.121033   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2104495.5    0.82787  \n",
      " \n",
      " \n",
      "i: 221\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        221     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1010122.125  4.400853e+12  1010122.125  62.747387   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2097821.0   0.807145  \n",
      " \n",
      " \n",
      "i: 222\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        222     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.015978e+06  4.436584e+12  1.015978e+06  63.237885   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2106320.0   0.839808  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 223\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        223     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1007263.625  4.389846e+12  1007263.625  62.576138   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2095196.0   0.789179  \n",
      " \n",
      " \n",
      "i: 224\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        224     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1009827.5  4.405306e+12  1009827.5  62.788628   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2098882.25   0.802379  \n",
      " \n",
      " \n",
      "i: 225\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        225     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 226\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        226     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1632854.5  6.479678e+12  1632854.5  99.841682   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545521.25  45.528374  \n",
      " \n",
      " \n",
      "i: 227\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        227     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 228\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        228     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 229\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        229     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1267288.125  4.761206e+12  1267288.125  71.880562   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2182018.75   2.898991  \n",
      " \n",
      " \n",
      "i: 230\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        230     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027136e+06  4.471962e+12  1.027136e+06  63.897659   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2114701.5   0.931897  \n",
      " \n",
      " \n",
      "i: 231\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        231     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.035178e+06  4.228335e+12  1.035178e+06  61.732906   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2056291.625   1.102525  \n",
      " \n",
      " \n",
      "i: 232\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        232     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.029737e+06  4.288902e+12  1.029737e+06  62.249161   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2070966.5   1.038784  \n",
      " \n",
      " \n",
      "i: 233\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        233     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1025766.625  4.473757e+12  1025766.625  63.867348   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2115125.75      0.916  \n",
      " \n",
      " \n",
      "i: 234\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        234     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1634284.0  6.484349e+12  1634284.0  99.998764   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546438.5  132.325851  \n",
      " \n",
      " \n",
      "i: 235\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        235     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 236\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        236     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1420562.75  5.437774e+12  1420562.75   83.24118   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2331903.5   5.237646  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 237\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        237     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 238\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        238     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 239\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        239     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1111980.5  4.237958e+12  1111980.5  62.783112   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2058630.125    1.66585  \n",
      " \n",
      " \n",
      "i: 240\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        240     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1472157.0  5.689868e+12  1472157.0  87.447334   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2385344.5   6.665789  \n",
      " \n",
      " \n",
      "i: 241\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        241     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 242\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        242     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1177828.75  4.427827e+12  1177828.75  66.140991   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2104240.25   2.124611  \n",
      " \n",
      " \n",
      "i: 243\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        243     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1632205.125  6.473247e+12  1632205.125  99.838966   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544257.75   47.00922  \n",
      " \n",
      " \n",
      "i: 244\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        244     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 245\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        245     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 246\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        246     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1626612.625  6.443619e+12  1626612.625  99.407303   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2538428.5  30.948074  \n",
      " \n",
      " \n",
      "i: 247\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        247     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 248\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        248     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1610121.875  6.357288e+12  1610121.875  98.135925   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2521366.25  19.675844  \n",
      " \n",
      " \n",
      "i: 249\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        249     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 250\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        250     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 251\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        251     nadam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1611670.75  6.365578e+12  1611670.75   98.25116   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2523009.75  20.172089  \n",
      " \n",
      " \n",
      "i: 252\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        252     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 253\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        253     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1011386.75  4.407654e+12  1011386.75  62.843952   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2099441.5   0.814362  \n",
      " \n",
      " \n",
      "i: 254\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        254     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1058086.5  4.790659e+12  1058086.5  51.823166   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2188757.25   0.916736  \n",
      " \n",
      " \n",
      "i: 255\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        255     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1009782.875  4.406637e+12  1009782.875  62.801758   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2099199.25   0.801325  \n",
      " \n",
      " \n",
      "i: 256\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        256     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.002408e+06  4.372016e+12  1.002408e+06  62.304253   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2090936.625   0.759789  \n",
      " \n",
      " \n",
      "i: 257\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        257     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  999795.4375  4.361033e+12  999795.4375  62.145317   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2088308.625   0.745552  \n",
      " \n",
      " \n",
      "i: 258\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        258     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1004940.875  4.375895e+12  1004940.875  62.384335   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2091864.0   0.777667  \n",
      " \n",
      " \n",
      "i: 259\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        259     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1632290.25  6.477836e+12  1632290.25  99.779663   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545159.25  41.207077  \n",
      " \n",
      " \n",
      "i: 260\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        260     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  980918.875  4.255918e+12  980918.875  60.757793   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2062987.625   0.667647  \n",
      " \n",
      " \n",
      "i: 261\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        261     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 262\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        262     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 263\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        263     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1621396.625  6.442391e+12  1621396.625   98.58252   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2538186.5  20.938513  \n",
      " \n",
      " \n",
      "i: 264\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        264     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 265\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        265     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 266\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        266     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.023057e+06  4.470054e+12  1.023057e+06  63.745522   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2114250.25   0.889871  \n",
      " \n",
      " \n",
      "i: 267\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        267     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634236.375  6.484194e+12  1634236.375  99.993561   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546408.0  98.382317  \n",
      " \n",
      " \n",
      "i: 268\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        268     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1023392.0  4.464113e+12  1023392.0  63.702282   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2112844.75   0.896469  \n",
      " \n",
      " \n",
      "i: 269\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        269     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1020705.25  4.451171e+12  1020705.25  63.501278   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2109779.75   0.876632  \n",
      " \n",
      " \n",
      "i: 270\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        270     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 271\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        271     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1211981.875  4.547947e+12  1211981.875  68.258224   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2132591.75   2.410838  \n",
      " \n",
      " \n",
      "i: 272\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        272     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1633372.375  6.481370e+12  1633372.375  99.898605   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2545853.5  51.697746  \n",
      " \n",
      " \n",
      "i: 273\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        273     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 274\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        274     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1027580.75  4.336451e+12  1027580.75  62.648682   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2082414.75   1.008996  \n",
      " \n",
      " \n",
      "i: 275\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        275     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1027140.0  4.476108e+12  1027140.0  63.934189   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2115681.5    0.92967  \n",
      " \n",
      " \n",
      "i: 276\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        276     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634277.25  6.484326e+12  1634277.25  99.998009   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546434.0  122.170853  \n",
      " \n",
      " \n",
      "i: 277\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        277     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1026427.875  4.420296e+12  1026427.875  63.406139   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2102450.0   0.953456  \n",
      " \n",
      " \n",
      "i: 278\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        278     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027145e+06  4.467842e+12  1.027145e+06  63.861916   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2113727.0   0.934268  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 279\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        279     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1622225.375  6.420435e+12  1622225.375  99.069893   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2533857.75   26.23287  \n",
      " \n",
      " \n",
      "i: 280\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        280     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634269.875  6.484303e+12  1634269.875  99.997223   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546429.5  115.215034  \n",
      " \n",
      " \n",
      "i: 281\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        281     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634104.125  6.483760e+12  1634104.125  99.978973   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546322.75  76.604851  \n",
      " \n",
      " \n",
      "i: 282\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        282     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 283\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        283     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1533097.125  5.976165e+12  1533097.125  92.196724   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2444619.5   9.261998  \n",
      " \n",
      " \n",
      "i: 284\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        284     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1575197.75  6.180659e+12  1575197.75  95.430725   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2486093.0  12.615096  \n",
      " \n",
      " \n",
      "i: 285\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        285     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 286\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        286     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 287\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        287     nadam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1369668.0  5.193886e+12  1369668.0  79.246315   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2279010.0   4.213604  \n",
      " \n",
      " \n",
      "i: 288\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        288     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 289\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        289     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.726633  6.911095e+12  1170743.0   85.33535   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2628896.0   0.726633  \n",
      " \n",
      " \n",
      "i: 290\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        290     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 291\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        291     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 292\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        292     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 293\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        293     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 294\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        294     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 295\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        295     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 296\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        296     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 297\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        297     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 298\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        298     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 299\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        299     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 300\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        300     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 301\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        301     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 302\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        302     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers    loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.2645  5.624351e+12  1458553.25  86.375359   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2371571.5     6.2645  \n",
      " \n",
      " \n",
      "i: 303\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        303     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 304\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        304     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers     loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  2.48975  4.580719e+12  1220948.625  68.846397   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2140261.5    2.48975  \n",
      " \n",
      " \n",
      "i: 305\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        305     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  2.443592  4.560642e+12  1215529.375  68.494614   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2135566.0   2.443592  \n",
      " \n",
      " \n",
      "i: 306\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        306     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 307\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        307     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 308\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        308     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  30.569361  6.441872e+12  1626292.75  99.383575   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2538084.25  30.569361  \n",
      " \n",
      " \n",
      "i: 309\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        309     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 310\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        310     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 311\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        311     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  32.834202  6.449698e+12  1627770.625  99.497345   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2539625.5  32.834202  \n",
      " \n",
      " \n",
      "i: 312\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        312     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  31.281399  6.444507e+12  1626791.625  99.422081   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2538603.25  31.281399  \n",
      " \n",
      " \n",
      "i: 313\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        313     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 314\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        314     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  27.781551  6.429345e+12  1623917.125  99.200302   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2535615.25  27.781551  \n",
      " \n",
      " \n",
      "i: 315\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        315     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 316\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        316     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 317\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        317     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 318\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        318     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 319\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        319     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 320\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        320     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 321\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        321     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 322\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        322     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  52.718189  6.476960e+12  1632902.875  99.892769   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544987.25  52.718189  \n",
      " \n",
      " \n",
      "i: 323\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        323     nadam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 324\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        324     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 325\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        325     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 326\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        326     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.680436  6.359898e+12  1132634.625  81.462723   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2521883.75   0.680436  \n",
      " \n",
      " \n",
      "i: 327\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        327     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 328\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        328     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.695491  6.527591e+12  1144355.0  82.644714   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2554915.0   0.695491  \n",
      " \n",
      " \n",
      "i: 329\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        329     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.651156  6.029391e+12  1109014.5  79.092369   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2455481.75   0.651156  \n",
      " \n",
      " \n",
      "i: 330\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        330     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.703063  6.635927e+12  1151726.25  83.429611   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2576029.25   0.703063  \n",
      " \n",
      " \n",
      "i: 331\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        331     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 332\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        332     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 333\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        333     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 334\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        334     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1.029394  4.326764e+12  1029288.375  62.627457   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2080087.625   1.029394  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 335\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        335     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 336\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        336     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 337\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        337     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1.209806  4.187601e+12  1046881.625  61.485046   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2046362.875   1.209806  \n",
      " \n",
      " \n",
      "i: 338\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        338     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.731077  6.936607e+12  1172541.75  85.482918   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2633743.75   0.731077  \n",
      " \n",
      " \n",
      "i: 339\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        339     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 340\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        340     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.733224  6.907754e+12  1170671.125  85.232208   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2628260.75   0.733224  \n",
      " \n",
      " \n",
      "i: 341\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        341     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 342\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        342     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 343\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        343     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 344\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        344     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  19.819645  6.358918e+12  1610450.75  98.162491   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2521689.5  19.819645  \n",
      " \n",
      " \n",
      "i: 345\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        345     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  24.014956  6.404448e+12  1619181.5  98.835434   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2530701.25  24.014956  \n",
      " \n",
      " \n",
      "i: 346\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        346     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  14.096066  6.231394e+12  1585526.5  96.243744   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2496276.0  14.096066  \n",
      " \n",
      " \n",
      "i: 347\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        347     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 348\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        348     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 349\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        349     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  15.260909  6.267174e+12  1592593.875  96.787689   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2503432.25  15.260909  \n",
      " \n",
      " \n",
      "i: 350\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        350     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  11.508453  6.122004e+12  1563510.5  94.547501   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2474268.5  11.508453  \n",
      " \n",
      " \n",
      "i: 351\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        351     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 352\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        352     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 353\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        353     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 354\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        354     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 355\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        355     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 356\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        356     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 357\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        357     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  41.332535  6.467210e+12  1631071.625  99.751747   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543071.0  41.332535  \n",
      " \n",
      " \n",
      "i: 358\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        358     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  32.074448  6.447197e+12  1627301.375  99.461456   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2539133.25  32.074448  \n",
      " \n",
      " \n",
      "i: 359\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        359     nadam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 360\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        360     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 361\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        361     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 362\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        362     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 363\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        363     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  70.876091  6.483510e+12  1634027.625  99.970566   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546273.75  70.876091  \n",
      " \n",
      " \n",
      "i: 364\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        364     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers     loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.70638  6.682251e+12  1154857.625  83.762154   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2585005.0    0.70638  \n",
      " \n",
      " \n",
      "i: 365\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        365     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.705372  6.657598e+12  1153215.125  83.574837   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2580232.25   0.705372  \n",
      " \n",
      " \n",
      "i: 366\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        366     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 367\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        367     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.688793  6.505577e+12  1142672.875  82.561302   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2550603.25   0.688793  \n",
      " \n",
      " \n",
      "i: 368\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        368     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 369\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        369     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 370\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        370     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  94.990555  6.484156e+12  1634225.5   99.99231   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546400.5  94.990555  \n",
      " \n",
      " \n",
      "i: 371\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        371     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 372\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        372     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  13.168789  6.199424e+12  1579098.125  95.743462   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2489864.25  13.168789  \n",
      " \n",
      " \n",
      "i: 373\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        373     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers    loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.1798  5.426369e+12  1418195.75  83.043152   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2329456.75     5.1798  \n",
      " \n",
      " \n",
      "i: 374\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        374     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  3.642746  5.020194e+12  1331501.0  76.471687   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2240579.0   3.642746  \n",
      " \n",
      " \n",
      "i: 375\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        375     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.548324  5.278030e+12  1387394.5   80.58744   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2297396.5   4.548324  \n",
      " \n",
      " \n",
      "i: 376\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        376     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  96.18454  6.484171e+12  1634229.75  99.992767   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546403.5   96.18454  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 377\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        377     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  3.024058  4.806569e+12  1279178.0  72.715126   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2192388.75   3.024058  \n",
      " \n",
      " \n",
      "i: 378\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        378     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 379\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        379     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 380\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        380     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  94.812691  6.484155e+12  1634224.625  99.992233   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546400.5  94.812691  \n",
      " \n",
      " \n",
      "i: 381\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        381     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 382\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        382     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  24.693569  6.410236e+12  1620269.25  98.917915   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2531844.5  24.693569  \n",
      " \n",
      " \n",
      "i: 383\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        383     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  22.355129  6.389710e+12  1616351.5  98.616142   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2527787.5  22.355129  \n",
      " \n",
      " \n",
      "i: 384\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        384     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 385\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        385     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  20.262106  6.364756e+12  1611583.125  98.250465   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2522846.75  20.262106  \n",
      " \n",
      " \n",
      "i: 386\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        386     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 387\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        387     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 388\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        388     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  131.229553  6.484347e+12  1634283.625  99.998703   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546438.0  131.229553  \n",
      " \n",
      " \n",
      "i: 389\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        389     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 390\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        390     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 391\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        391     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  129.374832  6.484343e+12  1634282.25  99.998589   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546437.25  129.374832  \n",
      " \n",
      " \n",
      "i: 392\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        392     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 393\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        393     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 394\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        394     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 395\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        395     nadam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  31.698393  6.446099e+12  1627088.375  99.444565   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2538917.0  31.698393  \n",
      " \n",
      " \n",
      "i: 396\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        396     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 397\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        397     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.681004  6.375226e+12  1133679.875  81.583549   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2524921.0   0.681004  \n",
      " \n",
      " \n",
      "i: 398\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        398     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.692774  6.541621e+12  1145191.75  82.801208   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2557659.25   0.692774  \n",
      " \n",
      " \n",
      "i: 399\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        399     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.687136  6.439174e+12  1138188.375  82.029655   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2537552.75   0.687136  \n",
      " \n",
      " \n",
      "i: 400\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        400     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.667178  6.168051e+12  1119258.0  80.032692   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2483556.25   0.667178  \n",
      " \n",
      " \n",
      "i: 401\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        401     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.596804  5.362957e+12  1057736.375  73.953926   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2315806.0   0.596804  \n",
      " \n",
      " \n",
      "i: 402\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        402     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  59.493259  6.482604e+12  1633750.25  99.940109   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546095.75  59.493259  \n",
      " \n",
      " \n",
      "i: 403\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        403     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.634847  5.775714e+12  1090384.625  77.090187   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2403271.5   0.634847  \n",
      " \n",
      " \n",
      "i: 404\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        404     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 405\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        405     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 406\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        406     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.765574  5.746949e+12  1097320.625  75.724747   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2397279.5   0.765574  \n",
      " \n",
      " \n",
      "i: 407\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        407     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  31.425613  6.469527e+12  1629742.625  99.499725   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543526.5  31.425613  \n",
      " \n",
      " \n",
      "i: 408\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        408     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 409\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        409     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1.754259  4.271048e+12  1125363.375  63.367012   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2066651.375   1.754259  \n",
      " \n",
      " \n",
      "i: 410\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        410     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.731447  6.857706e+12  1167298.375  84.858551   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2618722.25   0.731447  \n",
      " \n",
      " \n",
      "i: 411\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        411     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.748899  6.097408e+12  1118942.375  78.678856   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2469293.0   0.748899  \n",
      " \n",
      " \n",
      "i: 412\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        412     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.729284  6.889031e+12  1169327.875   85.12925   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2624696.5   0.729284  \n",
      " \n",
      " \n",
      "i: 413\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        413     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.725307  6.882175e+12  1168777.625  85.122665   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2623390.0   0.725307  \n",
      " \n",
      " \n",
      "i: 414\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        414     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  130.388779  6.484345e+12  1634283.25  99.998657   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546437.75  130.388779  \n",
      " \n",
      " \n",
      "i: 415\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        415     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  80.306862  6.483879e+12  1634140.375  99.982971   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546346.25  80.306862  \n",
      " \n",
      " \n",
      "i: 416\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        416     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 417\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        417     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  130.951569  6.484346e+12  1634283.375  99.998688   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546437.75  130.951569  \n",
      " \n",
      " \n",
      "i: 418\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        418     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 419\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        419     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.934593  5.725688e+12  1479631.5  88.049294   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2392841.0   6.934593  \n",
      " \n",
      " \n",
      "i: 420\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        420     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 421\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        421     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 422\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        422     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 423\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        423     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  149.537537  6.484369e+12  1634290.375  99.999466   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546442.5  149.537537  \n",
      " \n",
      " \n",
      "i: 424\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        424     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  110.064964  6.484280e+12  1634262.625  99.996422   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546425.0  110.064964  \n",
      " \n",
      " \n",
      "i: 425\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        425     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 426\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        426     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 427\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        427     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  34.132122  6.453498e+12  1628484.5  99.552063   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2540373.75  34.132122  \n",
      " \n",
      " \n",
      "i: 428\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        428     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 429\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        429     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  37.146366  6.460437e+12  1629793.5  99.652985   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2541739.0  37.146366  \n",
      " \n",
      " \n",
      "i: 430\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        430     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  38.70084  6.463332e+12  1630337.375  99.694801   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2542308.25   38.70084  \n",
      " \n",
      " \n",
      "i: 431\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        431     nadam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  24.742542  6.410550e+12  1620331.375   98.92289   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2531906.25  24.742542  \n",
      " \n",
      " \n",
      "i: 432\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        432      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 433\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        433      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 434\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        434      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  4.215553e+12  4.215553e+12  1023469.75  61.133678   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2053181.25   0.990693  \n",
      " \n",
      " \n",
      "i: 435\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        435      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 436\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        436      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.365404e+12  4.365404e+12  1016511.375  62.542011   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2089354.875   0.882603  \n",
      " \n",
      " \n",
      "i: 437\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        437      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 438\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        438      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 439\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        439      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 440\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        440      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 441\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        441      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.310504e+12  6.310504e+12  1600962.875  97.422218   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2512071.75  16.886864  \n",
      " \n",
      " \n",
      "i: 442\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        442      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 443\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        443      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.874481e+12  5.874481e+12  1511012.5  90.475174   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2423732.75   8.099397  \n",
      " \n",
      " \n",
      "i: 444\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        444      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 445\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        445      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 446\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        446      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 447\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        447      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 448\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        448      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.050778e+12  6.050778e+12  1548613.375  93.378555   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2459833.0  10.202635  \n",
      " \n",
      " \n",
      "i: 449\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        449      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.352159e+12  4.352159e+12  1153460.625  64.666985   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2086182.875    1.92036  \n",
      " \n",
      " \n",
      "i: 450\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        450      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 451\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        451      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 452\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        452      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.289063e+12  6.289063e+12  1596850.75  97.111984   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2507800.25  16.051451  \n",
      " \n",
      " \n",
      "i: 453\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        453      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 454\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        454      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.202504e+12  6.202504e+12  1579707.625  95.789818   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2490482.75  13.242379  \n",
      " \n",
      " \n",
      "i: 455\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        455      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.247998e+12  6.247998e+12  1588737.875  96.484184   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2499599.75  14.535617  \n",
      " \n",
      " \n",
      "i: 456\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        456      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 457\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        457      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 458\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        458      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 459\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        459      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 460\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        460      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 461\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        461      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.470163e+12  6.470163e+12  1631626.625  99.794456   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543651.5  43.766689  \n",
      " \n",
      " \n",
      "i: 462\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        462      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 463\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        463      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.465521e+12  6.465521e+12  1630752.5   99.72702   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2542739.0  40.113544  \n",
      " \n",
      " \n",
      "i: 464\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        464      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 465\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        465      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 466\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        466      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 467\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        467      adam     mse          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.334993e+12  6.334993e+12  1605832.75  97.807144   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2516941.25  18.312365  \n",
      " \n",
      " \n",
      "i: 468\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        468      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 469\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        469      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 470\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        470      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 471\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        471      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 472\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        472      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 473\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        473      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.544201e+12  4.544201e+12  1.014888e+06  64.309761   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2131713.25   0.773297  \n",
      " \n",
      " \n",
      "i: 474\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        474      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.520040e+12  4.520040e+12  1.016225e+06  64.085403   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2126038.75    0.79764  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 475\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        475      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.452180e+12  4.452180e+12  1.015976e+06  63.395481   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2110019.0   0.831402  \n",
      " \n",
      " \n",
      "i: 476\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        476      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.541003e+12  4.541003e+12  1014212.5  64.269714   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2130963.0   0.769183  \n",
      " \n",
      " \n",
      "i: 477\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        477      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 478\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        478      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 479\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        479      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 480\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        480      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.683234e+12  5.683234e+12  1470344.125  87.268227   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2383953.25    6.54449  \n",
      " \n",
      " \n",
      "i: 481\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        481      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 482\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        482      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.156636e+12  4.156636e+12  1064147.5  61.061378   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2038782.875    1.31489  \n",
      " \n",
      " \n",
      "i: 483\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        483      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 484\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        484      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 485\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        485      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.184790e+12  4.184790e+12  1037809.5  61.182339   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2045676.0   1.119426  \n",
      " \n",
      " \n",
      "i: 486\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        486      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 487\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        487      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 488\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        488      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 489\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        489      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.274562e+12  6.274562e+12  1593993.75  96.890846   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2504907.75  15.472684  \n",
      " \n",
      " \n",
      "i: 490\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        490      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.820062e+12  5.820062e+12  1499156.625  89.573181   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2412480.5   7.640696  \n",
      " \n",
      " \n",
      "i: 491\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        491      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.964721e+12  5.964721e+12  1530569.5  91.992897   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2442277.75   9.089412  \n",
      " \n",
      " \n",
      "i: 492\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        492      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.089194e+12  6.089194e+12  1556678.25   94.01107   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2467629.25  10.863777  \n",
      " \n",
      " \n",
      "i: 493\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        493      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.068769e+12  5.068769e+12  1342281.375  77.229538   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2251392.5   3.775498  \n",
      " \n",
      " \n",
      "i: 494\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        494      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 495\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        495      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 496\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        496      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.389935e+12  6.389935e+12  1616409.0  98.621811   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2527832.0  22.418592  \n",
      " \n",
      " \n",
      "i: 497\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        497      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 498\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        498      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 499\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        499      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 500\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        500      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.361232e+12  6.361232e+12  1610893.75  98.196419   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2522148.5  19.979052  \n",
      " \n",
      " \n",
      "i: 501\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        501      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 502\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        502      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.261869e+12  6.261869e+12  1591536.875  96.705154   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2502372.75  15.059659  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 503\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        503      adam     mse          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 504\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        504      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 505\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        505      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.144094e+12  4.144094e+12  1042260.5  60.517982   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2035704.875   1.142906  \n",
      " \n",
      " \n",
      "i: 506\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        506      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 507\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        507      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.483874e+12  6.483874e+12  1634138.75  99.982803   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546345.25   80.13517  \n",
      " \n",
      " \n",
      "i: 508\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        508      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.289335e+12  4.289335e+12  1.014112e+06  61.659405   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2071071.0   0.896729  \n",
      " \n",
      " \n",
      "i: 509\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        509      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 510\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        510      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.483877e+12  6.483877e+12  1634139.625  99.982872   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546345.75  80.200607  \n",
      " \n",
      " \n",
      "i: 511\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        511      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 512\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        512      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.483379e+12  4.483379e+12  1.011284e+06  63.636345   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2117399.25   0.774238  \n",
      " \n",
      " \n",
      "i: 513\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        513      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484296e+12  6.484296e+12  1634268.125  99.997002   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546428.25  113.766281  \n",
      " \n",
      " \n",
      "i: 514\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        514      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.743033e+12  5.743033e+12  1482663.75  88.250252   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2396462.75   6.962659  \n",
      " \n",
      " \n",
      "i: 515\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        515      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.477891e+12  6.477891e+12  1632307.25  99.781509   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545170.25  41.314003  \n",
      " \n",
      " \n",
      "i: 516\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        516      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 517\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        517      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.381784e+12  5.381784e+12  1408384.875   82.20546   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2319867.25   4.907022  \n",
      " \n",
      " \n",
      "i: 518\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        518      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.352262e+12  5.352262e+12  1401794.25  81.643364   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2313495.75   4.738029  \n",
      " \n",
      " \n",
      "i: 519\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        519      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 520\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        520      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.838876e+12  5.838876e+12  1502901.25   89.82103   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2416376.75   7.695203  \n",
      " \n",
      " \n",
      "i: 521\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        521      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 522\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        522      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484352e+12  6.484352e+12  1634284.75  99.998863   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546439.0  133.932617  \n",
      " \n",
      " \n",
      "i: 523\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        523      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.354580e+12  6.354580e+12  1609592.25  98.094452   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2520829.25  19.475857  \n",
      " \n",
      " \n",
      "i: 524\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        524      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.276737e+12  6.276737e+12  1594412.125  96.922318   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2505341.75  15.544339  \n",
      " \n",
      " \n",
      "i: 525\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        525      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 526\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        526      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.153151e+12  6.153151e+12  1569692.625  95.010437   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2480554.75  12.038622  \n",
      " \n",
      " \n",
      "i: 527\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        527      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.324712e+12  6.324712e+12  1603621.0  97.617798   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2514898.0  17.430973  \n",
      " \n",
      " \n",
      "i: 528\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        528      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 529\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        529      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.562330e+12  5.562330e+12  1445201.625  85.273651   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2358459.25   5.845129  \n",
      " \n",
      " \n",
      "i: 530\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        530      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.296645e+12  5.296645e+12  1390638.75  80.790344   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2301444.0   4.558808  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 531\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        531      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.477024e+12  6.477024e+12  1632914.375  99.893578   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544999.75  52.805195  \n",
      " \n",
      " \n",
      "i: 532\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        532      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484286e+12  6.484286e+12  1634264.625  99.996643   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546426.0  111.381554  \n",
      " \n",
      " \n",
      "i: 533\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        533      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.468423e+12  6.468423e+12  1631289.75  99.767654   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543309.5  42.043915  \n",
      " \n",
      " \n",
      "i: 534\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        534      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484368e+12  6.484368e+12  1634289.875  99.999405   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546442.25  147.18988  \n",
      " \n",
      " \n",
      "i: 535\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        535      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 536\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        536      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.412336e+12  6.412336e+12  1620658.125  98.946938   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2532259.0  24.931295  \n",
      " \n",
      " \n",
      "i: 537\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        537      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484369e+12  6.484369e+12  1634290.25  99.999435   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546442.5  148.706818  \n",
      " \n",
      " \n",
      "i: 538\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        538      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 539\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        539      adam     mse          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.423361e+12  6.423361e+12  1622759.5  99.109215   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2534435.0  26.607996  \n",
      " \n",
      " \n",
      "i: 540\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        540      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 541\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        541      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.242225e+12  6.242225e+12  1558448.25  91.664833   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2498444.5   8.080494  \n",
      " \n",
      " \n",
      "i: 542\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        542      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.521157e+12  4.521157e+12  1.016054e+06  64.093636   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2126301.25   0.795574  \n",
      " \n",
      " \n",
      "i: 543\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        543      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.313274e+12  4.313274e+12  1010859.375  61.833298   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2076842.25   0.859823  \n",
      " \n",
      " \n",
      "i: 544\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        544      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.517308e+12  4.517308e+12  1.011789e+06  63.996925   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2125396.0   0.761237  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 545\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        545      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.508115e+12  4.508115e+12  1.010566e+06  63.887524   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2123232.25   0.755944  \n",
      " \n",
      " \n",
      "i: 546\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        546      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.508777e+12  4.508777e+12  1.012433e+06  63.912693   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2123388.25   0.771181  \n",
      " \n",
      " \n",
      "i: 547\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        547      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.516996e+12  4.516996e+12  1008749.875  63.971058   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2125322.5   0.736777  \n",
      " \n",
      " \n",
      "i: 548\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        548      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 549\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        549      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.550419e+12  5.550419e+12  1442558.75  85.033821   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2355932.75   5.740955  \n",
      " \n",
      " \n",
      "i: 550\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        550      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.054827e+12  5.054827e+12  1338484.5  76.907532   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2248294.25   3.686035  \n",
      " \n",
      " \n",
      "i: 551\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        551      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.228391e+12  4.228391e+12  1108136.875  62.383846   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2056305.125   1.604116  \n",
      " \n",
      " \n",
      "i: 552\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        552      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.484211e+12  6.484211e+12  1634241.75  99.994118   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546411.5  100.189262  \n",
      " \n",
      " \n",
      "i: 553\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        553      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.175971e+12  4.175971e+12  1.038659e+06  61.057705   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2043519.25   1.124573  \n",
      " \n",
      " \n",
      "i: 554\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        554      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  4.210158e+12  4.210158e+12  1.029811e+06  61.288509   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2051867.0   1.049545  \n",
      " \n",
      " \n",
      "i: 555\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        555      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484220e+12  6.484220e+12  1634244.375  99.994431   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546413.25  101.256195  \n",
      " \n",
      " \n",
      "i: 556\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        556      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.303492e+12  4.303492e+12  1022200.375  62.091431   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2074486.0   0.964118  \n",
      " \n",
      " \n",
      "i: 557\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        557      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  4.292741e+12  4.292741e+12  1019018.5  61.862007   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2071893.125   0.938126  \n",
      " \n",
      " \n",
      "i: 558\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        558      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 559\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        559      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.078976e+12  6.078976e+12  1554581.375  93.850273   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2465558.0  10.699268  \n",
      " \n",
      " \n",
      "i: 560\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        560      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.481078e+12  6.481078e+12  1633283.375  99.888786   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545796.25  50.385029  \n",
      " \n",
      " \n",
      "i: 561\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        561      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 562\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        562      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.464313e+12  5.464313e+12  1425389.625  83.604652   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2337587.0   5.300611  \n",
      " \n",
      " \n",
      "i: 563\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        563      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 564\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        564      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 565\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        565      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.341370e+12  5.341370e+12  1400312.125  81.581024   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2311140.25     4.7663  \n",
      " \n",
      " \n",
      "i: 566\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        566      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  5.463212e+12  5.463212e+12  1424973.25   83.55732   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2337351.5   5.274542  \n",
      " \n",
      " \n",
      "i: 567\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        567      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484248e+12  6.484248e+12  1634253.375  99.995399   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546418.5  105.000282  \n",
      " \n",
      " \n",
      "i: 568\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        568      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 569\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        569      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 570\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        570      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 571\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        571      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 572\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        572      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.964012e+12  5.964012e+12  1530455.625  91.987579   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2442132.75   9.094269  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 573\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        573      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  6.484386e+12  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 574\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        574      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  6.074396e+12  6.074396e+12  1553677.0  93.784409   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2464629.0  10.645576  \n",
      " \n",
      " \n",
      "i: 575\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        575      adam     mse          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  5.517650e+12  5.517650e+12  1436558.875  84.564743   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2348968.0   5.623652  \n",
      " \n",
      " \n",
      "i: 576\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        576      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 577\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        577      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 578\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        578      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 579\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        579      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 580\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        580      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 581\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        581      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 582\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        582      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 583\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        583      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.014762e+06  4.430337e+12  1.014762e+06  63.147552   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2104836.5   0.832128  \n",
      " \n",
      " \n",
      "i: 584\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        584      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.012366e+06  4.413965e+12  1.012366e+06  62.929466   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2100944.0   0.819534  \n",
      " \n",
      " \n",
      "i: 585\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        585      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1294419.75  4.865470e+12  1294419.75  73.818588   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2205781.0   3.194058  \n",
      " \n",
      " \n",
      "i: 586\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        586      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1127789.625  4.277404e+12  1127789.625  63.486477   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2068188.5   1.771511  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 587\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        587      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1064467.25  4.165698e+12  1064467.25  61.332375   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2041004.125   1.337844  \n",
      " \n",
      " \n",
      "i: 588\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        588      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 589\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        589      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 590\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        590      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1027080.75  4.452336e+12  1027080.75    63.7225   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2110056.0   0.942275  \n",
      " \n",
      " \n",
      "i: 591\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        591      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 592\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        592      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.026870e+06  4.416672e+12  1.026870e+06  63.387138   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2101588.0   0.960816  \n",
      " \n",
      " \n",
      "i: 593\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        593      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 594\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        594      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 595\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        595      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 596\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        596      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 597\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        597      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1602321.625  6.316936e+12  1602321.625  97.536209   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2513351.5  17.344351  \n",
      " \n",
      " \n",
      "i: 598\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        598      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 599\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        599      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 600\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        600      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 601\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        601      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 602\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        602      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 603\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        603      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 604\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        604      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1625594.0  6.438164e+12  1625594.0  99.329994   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2537353.75  29.677088  \n",
      " \n",
      " \n",
      "i: 605\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        605      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 606\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        606      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 607\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        607      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 608\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        608      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 609\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        609      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 610\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        610      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 611\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        611      adam     mae          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 612\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        612      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 613\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        613      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.016085e+06  4.441688e+12  1.016085e+06  63.291317   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2107531.25   0.838103  \n",
      " \n",
      " \n",
      "i: 614\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        614      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 615\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        615      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 616\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        616      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1016258.75  4.437466e+12  1016258.75  63.253502   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2106529.25   0.841891  \n",
      " \n",
      " \n",
      "i: 617\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        617      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.003005e+06  4.372676e+12  1.003005e+06  62.320408   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2091094.5   0.764033  \n",
      " \n",
      " \n",
      "i: 618\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        618      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1010836.0  4.407948e+12  1010836.0  62.835945   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2099511.5   0.809532  \n",
      " \n",
      " \n",
      "i: 619\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        619      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 620\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        620      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 621\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        621      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 622\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        622      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1026755.5  4.475129e+12  1026755.5  63.912582   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2115450.0   0.925962  \n",
      " \n",
      " \n",
      "i: 623\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        623      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1026173.125  4.479447e+12  1026173.125   63.93177   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2116470.5   0.917235  \n",
      " \n",
      " \n",
      "i: 624\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        624      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 625\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        625      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.024980e+06  4.478925e+12  1.024980e+06  63.887497   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2116347.0   0.904874  \n",
      " \n",
      " \n",
      "i: 626\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        626      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 627\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        627      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 628\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        628      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 629\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        629      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 630\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        630      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 631\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        631      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 632\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        632      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1254597.625  4.710423e+12  1254597.625  71.062042   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2170351.0   2.794195  \n",
      " \n",
      " \n",
      "i: 633\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        633      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 634\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        634      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.042078e+06  4.200293e+12  1.042078e+06  61.563622   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2049461.625   1.166676  \n",
      " \n",
      " \n",
      "i: 635\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        635      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027798e+06  4.448177e+12  1.027798e+06  63.711075   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2109070.25   0.952846  \n",
      " \n",
      " \n",
      "i: 636\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        636      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 637\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        637      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 638\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        638      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 639\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        639      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 640\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        640      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1614759.875  6.381346e+12  1614759.875  98.494392   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2526132.75  21.595955  \n",
      " \n",
      " \n",
      "i: 641\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        641      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 642\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        642      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 643\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        643      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1541963.25  6.017776e+12  1541963.25  92.888329   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2453115.5   9.836853  \n",
      " \n",
      " \n",
      "i: 644\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        644      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 645\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        645      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 646\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        646      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 647\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        647      adam     mae          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 648\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        648      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 649\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        649      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 650\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        650      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 651\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        651      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 652\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        652      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.016211e+06  4.439435e+12  1.016211e+06  63.271736   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2106996.75   0.840431  \n",
      " \n",
      " \n",
      "i: 653\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        653      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 654\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        654      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634013.125  6.483463e+12  1634013.125  99.968971   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546264.5  69.998138  \n",
      " \n",
      " \n",
      "i: 655\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        655      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 656\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        656      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 657\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        657      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1263677.5  4.745787e+12  1263677.5  71.673409   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2178482.75   2.882405  \n",
      " \n",
      " \n",
      "i: 658\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        658      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634190.625  6.484043e+12  1634190.625  99.988518   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546378.5  87.430008  \n",
      " \n",
      " \n",
      "i: 659\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        659      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027056e+06  4.357921e+12  1.027056e+06  62.836437   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2087563.5   0.997025  \n",
      " \n",
      " \n",
      "i: 660\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        660      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1266870.75  4.759409e+12  1266870.75  71.856628   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2181607.0   2.897029  \n",
      " \n",
      " \n",
      "i: 661\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        661      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 662\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        662      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1026534.0  4.428266e+12  1026534.0   63.48428   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2104344.5   0.949922  \n",
      " \n",
      " \n",
      "i: 663\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        663      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634264.375  6.484285e+12  1634264.375   99.99662   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546426.0  111.234428  \n",
      " \n",
      " \n",
      "i: 664\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        664      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.026309e+06  4.445532e+12  1.026309e+06  63.633469   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2108443.0   0.937554  \n",
      " \n",
      " \n",
      "i: 665\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        665      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.025554e+06  4.482404e+12  1.025554e+06  63.937466   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2117169.0   0.909023  \n",
      " \n",
      " \n",
      "i: 666\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        666      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 667\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        667      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 668\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        668      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 669\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        669      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634286.125  6.484356e+12  1634286.125  99.999001   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546440.0  136.883392  \n",
      " \n",
      " \n",
      "i: 670\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        670      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1507300.125  5.856396e+12  1507300.125  90.212944   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2419999.25   8.000646  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 671\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        671      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1146526.25  4.329846e+12  1146526.25  64.429665   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2080828.125   1.903638  \n",
      " \n",
      " \n",
      "i: 672\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        672      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634285.75  6.484354e+12  1634285.75  99.998962   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546439.5  135.847626  \n",
      " \n",
      " \n",
      "i: 673\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        673      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1371979.625  5.205649e+12  1371979.625  79.405106   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2281589.0   4.243112  \n",
      " \n",
      " \n",
      "i: 674\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        674      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1134035.75  4.294423e+12  1134035.75  63.771736   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2072299.0   1.810871  \n",
      " \n",
      " \n",
      "i: 675\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        675      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 676\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        676      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 677\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        677      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 678\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        678      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 679\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        679      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1610855.75  6.361060e+12  1610855.75  98.193039   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2522114.25  19.956043  \n",
      " \n",
      " \n",
      "i: 680\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        680      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634113.875  6.483793e+12  1634113.875   99.98008   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546329.25  77.538094  \n",
      " \n",
      " \n",
      "i: 681\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        681      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 682\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        682      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1618146.375  6.399230e+12  1618146.375  98.752281   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2529670.0   23.27704  \n",
      " \n",
      " \n",
      "i: 683\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        683      adam     mae          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1591092.625  6.259740e+12  1591092.625  96.668777   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2501947.25  14.960587  \n",
      " \n",
      " \n",
      "i: 684\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        684      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1633728.375  6.482533e+12  1633728.375  99.937698   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546082.0  58.892048  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 685\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        685      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1384780.375  5.724803e+12  1384780.375  73.793365   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2392656.25   2.937077  \n",
      " \n",
      " \n",
      "i: 686\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        686      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1002769.875  4.370133e+12  1002769.875  62.288326   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2090486.25   0.763507  \n",
      " \n",
      " \n",
      "i: 687\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        687      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1633728.375  6.482533e+12  1633728.375  99.937698   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546082.0  58.891094  \n",
      " \n",
      " \n",
      "i: 688\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        688      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.004107e+06  4.372011e+12  1.004107e+06  62.328552   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2090935.375   0.773029  \n",
      " \n",
      " \n",
      "i: 689\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        689      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 690\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        690      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 691\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        691      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  995865.25  4.339977e+12  995865.25  61.857437   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2083261.25   0.727294  \n",
      " \n",
      " \n",
      "i: 692\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        692      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  997818.6875  4.346699e+12  997818.6875  61.955982   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2084873.75   0.738119  \n",
      " \n",
      " \n",
      "i: 693\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        693      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634237.625  6.484197e+12  1634237.625   99.99366   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546408.5  98.701057  \n",
      " \n",
      " \n",
      "i: 694\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        694      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027129e+06  4.464572e+12  1.027129e+06   63.83271   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2112953.25   0.935888  \n",
      " \n",
      " \n",
      "i: 695\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        695      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.026335e+06  4.476825e+12  1.026335e+06  63.913647   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2115851.0   0.920458  \n",
      " \n",
      " \n",
      "i: 696\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        696      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634236.25  6.484194e+12  1634236.25  99.993515   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546408.0  98.293037  \n",
      " \n",
      " \n",
      "i: 697\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        697      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 698\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        698      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1605563.25  6.391297e+12  1605563.25  96.842499   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2528101.5  14.348452  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 699\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        699      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 700\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        700      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 701\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        701      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1022698.625  4.471630e+12  1022698.625  63.749878   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2114623.0   0.885363  \n",
      " \n",
      " \n",
      "i: 702\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        702      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 703\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        703      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 704\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        704      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 705\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        705      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634275.25  6.484320e+12  1634275.25  99.997787   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546432.75  119.944481  \n",
      " \n",
      " \n",
      "i: 706\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        706      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.043305e+06  4.194960e+12  1.043305e+06  61.512455   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2048160.125   1.177117  \n",
      " \n",
      " \n",
      "i: 707\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        707      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers          loss      mse_test      mae_test  mape_test  \\\n",
      "0                   0  1.027119e+06  4.333855e+12  1.027119e+06  62.601974   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2081791.375   1.004825  \n",
      " \n",
      " \n",
      "i: 708\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        708      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1325890.875  4.997367e+12  1325890.875  76.043121   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2235479.25    3.55008  \n",
      " \n",
      " \n",
      "i: 709\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        709      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 710\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        710      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1026820.75  4.485608e+12  1026820.75  64.008118   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2117925.5   0.920878  \n",
      " \n",
      " \n",
      "i: 711\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        711      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634260.25  6.484271e+12  1634260.25  99.996132   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546423.25  108.576057  \n",
      " \n",
      " \n",
      "i: 712\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        712      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 713\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        713      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 714\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        714      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1634286.25  6.484357e+12  1634286.25  99.999039   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546440.0  137.404785  \n",
      " \n",
      " \n",
      "i: 715\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        715      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 716\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        716      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1409260.875  5.382773e+12  1409260.875  82.323097   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2320080.25   4.978974  \n",
      " \n",
      " \n",
      "i: 717\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        717      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 718\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        718      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers         loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1634295.375  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 719\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        719      adam     mae          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  1353530.5  5.118033e+12  1353530.5  78.069054   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2262307.0   3.961896  \n",
      " \n",
      " \n",
      "i: 720\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        720      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 721\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        721      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.730747  6.967889e+12  1174608.25  85.732201   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2639675.75   0.730747  \n",
      " \n",
      " \n",
      "i: 722\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        722      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 723\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        723      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 724\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        724      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.724001  6.893060e+12  1169478.0  85.225288   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2625463.75   0.724001  \n",
      " \n",
      " \n",
      "i: 725\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        725      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.711775  6.716116e+12  1157224.125  83.964027   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2591547.0   0.711775  \n",
      " \n",
      " \n",
      "i: 726\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        726      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 727\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        727      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.714636  6.742433e+12  1159094.0  84.139732   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2596619.5   0.714636  \n",
      " \n",
      " \n",
      "i: 728\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        728      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 729\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        729      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 730\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        730      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 731\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        731      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.668581  5.305602e+12  1393325.625  81.062012   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2303389.25   4.668581  \n",
      " \n",
      " \n",
      "i: 732\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        732      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 733\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        733      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 734\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        734      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  9.008076  5.952190e+12  1528078.75  91.817955   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2439711.0   9.008076  \n",
      " \n",
      " \n",
      "i: 735\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        735      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 736\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        736      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  6.212965  5.617205e+12  1456990.75  86.247299   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2370064.5   6.212965  \n",
      " \n",
      " \n",
      "i: 737\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        737      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1.865552  4.312049e+12  1140440.875  64.136078   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2076547.25   1.865552  \n",
      " \n",
      " \n",
      "i: 738\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        738      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 739\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        739      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 740\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        740      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  39.672482  6.464827e+12  1630622.5  99.717056   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2542602.25  39.672482  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 741\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        741      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  40.199223  6.465594e+12  1630768.375  99.728394   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2542753.25  40.199223  \n",
      " \n",
      " \n",
      "i: 742\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        742      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  24.810184  6.410545e+12  1620348.375  98.925682   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2531905.5  24.810184  \n",
      " \n",
      " \n",
      "i: 743\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        743      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  19.804972  6.358241e+12  1610335.75  98.154991   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2521555.25  19.804972  \n",
      " \n",
      " \n",
      "i: 744\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        744      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  27.906523  6.429845e+12  1624017.125  99.208443   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2535714.0  27.906523  \n",
      " \n",
      " \n",
      "i: 745\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        745      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  25.397396  6.414752e+12  1621149.75  98.987495   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2532736.25  25.397396  \n",
      " \n",
      " \n",
      "i: 746\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        746      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 747\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        747      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 748\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        748      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  61.569279  6.480264e+12  1633523.125  99.940552   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545636.25  61.569279  \n",
      " \n",
      " \n",
      "i: 749\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        749      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  57.053062  6.478864e+12  1633260.125  99.920242   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545361.25  57.053062  \n",
      " \n",
      " \n",
      "i: 750\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        750      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 751\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        751      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 752\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        752      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 753\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        753      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 754\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        754      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  76.801109  6.482764e+12  1633991.0  99.976562   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546127.25  76.801109  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 755\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        755      adam    msle          relu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 756\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        756      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 757\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        757      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 758\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        758      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 759\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        759      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 760\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        760      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.704095  6.668508e+12  1153898.25  83.682587   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2582345.5   0.704095  \n",
      " \n",
      " \n",
      "i: 761\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        761      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 762\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        762      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 763\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        763      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 764\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        764      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 765\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        765      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 766\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        766      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 767\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        767      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.749281  6.159741e+12  1123072.625  79.190521   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2481882.5   0.749281  \n",
      " \n",
      " \n",
      "i: 768\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        768      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 769\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        769      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 770\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        770      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 771\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        771      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 772\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        772      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 773\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        773      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 774\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        774      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  20.240896  6.364503e+12  1611533.375  98.246552   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2522796.75  20.240896  \n",
      " \n",
      " \n",
      "i: 775\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        775      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 776\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        776      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  14.340284  6.239359e+12  1587108.625  96.365822   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2497870.75  14.340284  \n",
      " \n",
      " \n",
      "i: 777\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        777      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 778\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        778      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 779\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        779      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 780\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        780      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 781\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        781      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  15.054655  6.261418e+12  1591458.125  96.699974   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2502282.5  15.054655  \n",
      " \n",
      " \n",
      "i: 782\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        782      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 783\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        783      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 784\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        784      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 785\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        785      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  45.959763  6.472388e+12  1632042.625  99.826309   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544088.75  45.959763  \n",
      " \n",
      " \n",
      "i: 786\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        786      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  47.206387  6.473419e+12  1632236.875   99.84137   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544291.25  47.206387  \n",
      " \n",
      " \n",
      "i: 787\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        787      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 788\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        788      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  36.827267  6.459722e+12  1629661.25  99.643005   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2541598.25  36.827267  \n",
      " \n",
      " \n",
      "i: 789\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        789      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 790\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        790      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 791\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        791      adam    msle          relu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  22.653467  6.392018e+12  1616815.5  98.653831   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2528244.0  22.653467  \n",
      " \n",
      " \n",
      "i: 792\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        792      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  70.803345  6.483506e+12  1634026.125  99.970436   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546273.0  70.803345  \n",
      " \n",
      " \n",
      "i: 793\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        793      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  10.168814  6.313779e+12  1581238.375   94.16935   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2512723.25  10.168814  \n",
      " \n",
      " \n",
      "i: 794\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        794      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 795\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        795      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.722599  6.862978e+12  1167427.25  85.003838   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2619728.5   0.722599  \n",
      " \n",
      " \n",
      "i: 796\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        796      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 797\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        797      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.698121  6.563187e+12  1146787.0  82.901268   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2561871.75   0.698121  \n",
      " \n",
      " \n",
      "i: 798\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        798      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  70.943398  6.483514e+12  1634028.25  99.970688   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546274.5  70.943398  \n",
      " \n",
      " \n",
      "i: 799\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        799      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 800\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        800      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.686651  6.447462e+12  1138724.25  82.106544   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2539185.25   0.686651  \n",
      " \n",
      " \n",
      "i: 801\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        801      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 802\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        802      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 803\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        803      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  5.052553  5.397172e+12  1412306.0   82.57328   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2323181.5   5.052553  \n",
      " \n",
      " \n",
      "i: 804\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        804      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  115.49408  6.484304e+12  1634270.25  99.997246   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546429.75  115.49408  \n",
      " \n",
      " \n",
      "i: 805\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        805      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 806\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        806      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers     loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  4.31709  5.222430e+12  1375631.375   79.68486   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2285263.75    4.31709  \n",
      " \n",
      " \n",
      "i: 807\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        807      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  116.219635  6.484307e+12  1634271.25  99.997353   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546430.25  116.219635  \n",
      " \n",
      " \n",
      "i: 808\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        808      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  1.311123  4.168149e+12  1059977.375  61.357742   \n",
      "\n",
      "   cosine_similarity_test    rmse_test  msle_test  \n",
      "0                     1.0  2041604.625   1.311123  \n",
      " \n",
      " \n",
      "i: 809\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        809      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 810\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        810      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 811\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        811      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 812\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        812      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  92.081047  6.484119e+12  1634213.75  99.991035   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2546393.5  92.081047  \n",
      " \n",
      " \n",
      "i: 813\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        813      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 814\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        814      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  41.212803  6.467429e+12  1631099.125  99.752693   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543114.0  41.212803  \n",
      " \n",
      " \n",
      "i: 815\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        815      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 816\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        816      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  28.420551  6.432827e+12  1624568.375  99.249702   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2536301.75  28.420551  \n",
      " \n",
      " \n",
      "i: 817\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        817      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 818\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        818      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 819\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        819      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  158.027237  6.484375e+12  1634292.125  99.999649   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546443.5  158.027237  \n",
      " \n",
      " \n",
      "i: 820\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        820      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  55.428448  6.478235e+12  1633141.75   99.91111   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2545237.75  55.428448  \n",
      " \n",
      " \n",
      "i: 821\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        821      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  119.572685  6.484318e+12  1634274.75  99.997742   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546432.5  119.572685  \n",
      " \n",
      " \n",
      "i: 822\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        822      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 823\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        823      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  37.56134  6.461281e+12  1629951.25  99.665047   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2541905.0   37.56134  \n",
      " \n",
      " \n",
      "i: 824\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        824      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  48.165726  6.474565e+12  1632437.375  99.855522   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2544516.75  48.165726  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 825\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        825      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 826\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        826      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 827\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        827      adam    msle          selu                 relu      50   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  41.478172  6.467944e+12  1631189.75   99.75914   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2543215.25  41.478172  \n",
      " \n",
      " \n",
      "i: 828\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        828      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  59.526257  6.482608e+12  1633751.625  99.940239   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546096.75  59.526257  \n",
      " \n",
      " \n",
      "i: 829\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        829      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 830\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        830      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 831\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        831      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 832\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        832      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.669797  6.223213e+12  1123075.5  80.466637   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2494636.75   0.669797  \n",
      " \n",
      " \n",
      "i: 833\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        833      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 834\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        834      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  59.48299  6.482603e+12  1633749.875  99.940071   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2546095.75   59.48299  \n",
      " \n",
      " \n",
      "i: 835\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        835      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  0.593963  5.370967e+12  1058185.5  74.121857   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2317534.5   0.593963  \n",
      " \n",
      " \n",
      "i: 836\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        836      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0           1                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.586027  5.225329e+12  1046295.75  72.798332   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2285897.75   0.586027  \n",
      " \n",
      " \n",
      "i: 837\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        837      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  100.851196  6.484215e+12  1634243.625  99.994316   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546412.25  100.851196  \n",
      " \n",
      " \n",
      "i: 838\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        838      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  1.141973  4.216554e+12  1039186.75   61.71447   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2053425.0   1.141973  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 839\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        839      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 840\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        840      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  100.833153  6.484215e+12  1634243.625  99.994316   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546412.25  100.833153  \n",
      " \n",
      " \n",
      "i: 841\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        841      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  0.790536  5.348939e+12  1072705.875  72.223587   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2312777.5   0.790536  \n",
      " \n",
      " \n",
      "i: 842\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        842      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  0.726052  6.884509e+12  1168950.75  85.131927   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2623834.75   0.726052  \n",
      " \n",
      " \n",
      "i: 843\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        843      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  101.181885  6.484219e+12  1634244.25  99.994408   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546413.0  101.181885  \n",
      " \n",
      " \n",
      "i: 844\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        844      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 845\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        845      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          10                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 846\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        846      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 847\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        847      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  20.043463  6.361929e+12  1611034.375  98.207802   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2522286.5  20.043463  \n",
      " \n",
      " \n",
      "i: 848\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        848      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 849\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        849      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 850\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        850      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  12.179392  6.156092e+12  1570411.375  95.076935   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2481147.25  12.179392  \n",
      " \n",
      " \n",
      "i: 851\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        851      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers      loss      mse_test   mae_test  mape_test  \\\n",
      "0                   0  9.249917  5.977273e+12  1533263.5  92.203102   \n",
      "\n",
      "   cosine_similarity_test   rmse_test  msle_test  \n",
      "0                     1.0  2444846.25   9.249917  \n",
      " \n",
      " \n",
      "i: 852\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        852      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i: 853\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        853      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 854\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        854      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0          32                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  16.431198  6.299623e+12  1598864.25  97.262566   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2509905.0  16.431198  \n",
      " \n",
      " \n",
      "i: 855\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        855      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 856\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        856      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                       5   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  116.501656  6.484307e+12  1634271.625  99.997383   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     1.0  2546430.25  116.501656  \n",
      " \n",
      " \n",
      "i: 857\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        857      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      1                1                      10   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  102.895554  6.484233e+12  1634248.25  99.994865   \n",
      "\n",
      "   cosine_similarity_test  rmse_test   msle_test  \n",
      "0                     1.0  2546415.5  102.895554  \n",
      " \n",
      " \n",
      "i: 858\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        858      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 859\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        859      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  31.395182  6.445064e+12  1626891.875  99.429367   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2538713.0  31.395182  \n",
      " \n",
      " \n",
      "i: 860\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        860      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                      5                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  34.769081  6.455268e+12  1628814.375  99.577133   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2540722.0  34.769081  \n",
      " \n",
      " \n",
      "i: 861\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        861      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       1   \n",
      "\n",
      "   num_dropout_layers        loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  195.989105  6.484386e+12  1634295.375      100.0   \n",
      "\n",
      "   cosine_similarity_test   rmse_test   msle_test  \n",
      "0                     0.0  2546445.75  195.989105  \n",
      " \n",
      " \n",
      "i: 862\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        862      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                       5   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test    mae_test  mape_test  \\\n",
      "0                   0  42.708431  6.469535e+12  1631487.25  99.781929   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543528.0  42.708431  \n",
      " \n",
      " \n",
      "i: 863\n",
      "Percent Complete 0.11574074074074074 %\n",
      " \n",
      " \n",
      "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
      "0        863      adam    msle          selu                 relu     100   \n",
      "\n",
      "   batch_size  neurons_in_inputlayer  num_hiddenlayer  neurons_in_hiddenlayer  \\\n",
      "0         100                     10                1                      10   \n",
      "\n",
      "   num_dropout_layers       loss      mse_test     mae_test  mape_test  \\\n",
      "0                   0  42.818615  6.469346e+12  1631463.875  99.781151   \n",
      "\n",
      "   cosine_similarity_test  rmse_test  msle_test  \n",
      "0                     1.0  2543491.0  42.818615  \n",
      " \n",
      " \n",
      "Time:  9:08:40.950942\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "start=datetime.now()\n",
    "\n",
    "\n",
    "number_parameters = len(optimizer_list) * len(loss_fn_list) * len(activation_fn_list) * len(epochs_list) * len(batch_size_list) * len(neurons_in_inputlayer_list) * len(neurons_in_hiddenlayer_list) * len(num_dropout_layers_list) \n",
    "print(\"number_parameters :\", number_parameters)\n",
    "print(number_parameters)\n",
    "\n",
    "i = 0\n",
    "for opt in optimizer_list:\n",
    "    for loss in loss_fn_list:\n",
    "        for activation in activation_fn_list:\n",
    "            for epochs in epochs_list:\n",
    "                for batch in batch_size_list:\n",
    "                    for neurons_in_inputlayer in neurons_in_inputlayer_list:\n",
    "                        for neurons_in_hiddenlayer in neurons_in_hiddenlayer_list:\n",
    "                            \n",
    "                            results = model_results(model_num              = i, \n",
    "                                                    optimizer              = opt ,\n",
    "                                                    loss_fn                = loss, \n",
    "                                                    activation_fn          = activation, \n",
    "                                                    output_activation_fn   = 'relu', \n",
    "                                                    epochs                 = epochs, \n",
    "                                                    batch_size             = batch, \n",
    "                                                    neurons_in_inputlayer  = neurons_in_inputlayer,\n",
    "                                                    num_hiddenlayer        = 1,\n",
    "                                                    neurons_in_hiddenlayer = neurons_in_hiddenlayer,\n",
    "                                                    num_dropout_layers     = 0, \n",
    "                                                    verbose                = 0\n",
    "                                                    )\n",
    "                            \n",
    "                            results_df = results_df.append(results, ignore_index = True)\n",
    "                            print('i:', i)\n",
    "                            print(\"Percent Complete\", 100*i/number_parameters, '%')\n",
    "                            print( ' \\n ')\n",
    "                            print(results)\n",
    "                            print( ' \\n ')\n",
    "                            i+=1\n",
    "                                \n",
    "stop = datetime.now()\n",
    "\n",
    "print('Time: ', stop - start)                               \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add information about the data structure to the model results. \n",
    "results_df['corr'] = corr\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time:  9:08:40.950942\n"
     ]
    }
   ],
   "source": [
    "runtime = stop - start\n",
    "print('Time: ', runtime) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.timedelta(seconds=32920, microseconds=950942)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "runtime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_df['total_runtime'] = runtime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>output_activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "      <th>corr</th>\n",
       "      <th>total_runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1634295.375</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2546445.750</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1634295.375</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2546445.750</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1634295.375</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2546445.750</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.659994e+12</td>\n",
       "      <td>4.659994e+12</td>\n",
       "      <td>1238939.875</td>\n",
       "      <td>69.783180</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2158702.000</td>\n",
       "      <td>2.553004</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>1048607.750</td>\n",
       "      <td>60.543694</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2035016.625</td>\n",
       "      <td>1.189505</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>861</th>\n",
       "      <td>859.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.139518e+01</td>\n",
       "      <td>6.445064e+12</td>\n",
       "      <td>1626891.875</td>\n",
       "      <td>99.429367</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2538713.000</td>\n",
       "      <td>31.395182</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>860.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.476908e+01</td>\n",
       "      <td>6.455268e+12</td>\n",
       "      <td>1628814.375</td>\n",
       "      <td>99.577133</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2540722.000</td>\n",
       "      <td>34.769081</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>861.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.959891e+02</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1634295.375</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2546445.750</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>862.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.270843e+01</td>\n",
       "      <td>6.469535e+12</td>\n",
       "      <td>1631487.250</td>\n",
       "      <td>99.781929</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2543528.000</td>\n",
       "      <td>42.708431</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>863.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.281861e+01</td>\n",
       "      <td>6.469346e+12</td>\n",
       "      <td>1631463.875</td>\n",
       "      <td>99.781151</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2543491.000</td>\n",
       "      <td>42.818615</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>866 rows Ã— 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
       "0          0.0     nadam     mse          relu                 relu     1.0   \n",
       "1          0.0     nadam     mse          relu                 relu     1.0   \n",
       "2          0.0     nadam     mse          relu                 relu    50.0   \n",
       "3          1.0     nadam     mse          relu                 relu    50.0   \n",
       "4          2.0     nadam     mse          relu                 relu    50.0   \n",
       "..         ...       ...     ...           ...                  ...     ...   \n",
       "861      859.0      adam    msle          selu                 relu   100.0   \n",
       "862      860.0      adam    msle          selu                 relu   100.0   \n",
       "863      861.0      adam    msle          selu                 relu   100.0   \n",
       "864      862.0      adam    msle          selu                 relu   100.0   \n",
       "865      863.0      adam    msle          selu                 relu   100.0   \n",
       "\n",
       "     batch_size  neurons_in_inputlayer  num_hiddenlayer  \\\n",
       "0           1.0                    1.0              1.0   \n",
       "1           1.0                    1.0              1.0   \n",
       "2           1.0                    1.0              1.0   \n",
       "3           1.0                    1.0              1.0   \n",
       "4           1.0                    1.0              1.0   \n",
       "..          ...                    ...              ...   \n",
       "861       100.0                    5.0              1.0   \n",
       "862       100.0                    5.0              1.0   \n",
       "863       100.0                   10.0              1.0   \n",
       "864       100.0                   10.0              1.0   \n",
       "865       100.0                   10.0              1.0   \n",
       "\n",
       "     neurons_in_hiddenlayer  num_dropout_layers          loss      mse_test  \\\n",
       "0                       1.0                 0.0  6.484386e+12  6.484386e+12   \n",
       "1                       1.0                 0.0  6.484386e+12  6.484386e+12   \n",
       "2                       1.0                 0.0  6.484386e+12  6.484386e+12   \n",
       "3                       5.0                 0.0  4.659994e+12  4.659994e+12   \n",
       "4                      10.0                 0.0  4.141292e+12  4.141292e+12   \n",
       "..                      ...                 ...           ...           ...   \n",
       "861                     5.0                 0.0  3.139518e+01  6.445064e+12   \n",
       "862                    10.0                 0.0  3.476908e+01  6.455268e+12   \n",
       "863                     1.0                 0.0  1.959891e+02  6.484386e+12   \n",
       "864                     5.0                 0.0  4.270843e+01  6.469535e+12   \n",
       "865                    10.0                 0.0  4.281861e+01  6.469346e+12   \n",
       "\n",
       "        mae_test   mape_test  cosine_similarity_test    rmse_test   msle_test  \\\n",
       "0    1634295.375  100.000000                     0.0  2546445.750  195.989105   \n",
       "1    1634295.375  100.000000                     0.0  2546445.750  195.989105   \n",
       "2    1634295.375  100.000000                     0.0  2546445.750  195.989105   \n",
       "3    1238939.875   69.783180                     1.0  2158702.000    2.553004   \n",
       "4    1048607.750   60.543694                     1.0  2035016.625    1.189505   \n",
       "..           ...         ...                     ...          ...         ...   \n",
       "861  1626891.875   99.429367                     1.0  2538713.000   31.395182   \n",
       "862  1628814.375   99.577133                     1.0  2540722.000   34.769081   \n",
       "863  1634295.375  100.000000                     0.0  2546445.750  195.989105   \n",
       "864  1631487.250   99.781929                     1.0  2543528.000   42.708431   \n",
       "865  1631463.875   99.781151                     1.0  2543491.000   42.818615   \n",
       "\n",
       "         corr          total_runtime  \n",
       "0    0.528903 0 days 09:08:40.950942  \n",
       "1    0.528903 0 days 09:08:40.950942  \n",
       "2    0.528903 0 days 09:08:40.950942  \n",
       "3    0.528903 0 days 09:08:40.950942  \n",
       "4    0.528903 0 days 09:08:40.950942  \n",
       "..        ...                    ...  \n",
       "861  0.528903 0 days 09:08:40.950942  \n",
       "862  0.528903 0 days 09:08:40.950942  \n",
       "863  0.528903 0 days 09:08:40.950942  \n",
       "864  0.528903 0 days 09:08:40.950942  \n",
       "865  0.528903 0 days 09:08:40.950942  \n",
       "\n",
       "[866 rows x 20 columns]"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_df.to_csv('Experiment4_results_views_vs_comments.csv')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=866, step=1)"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.index"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.indexing._AtIndexer at 0x19cf8ff8ea0>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.at"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<pandas.core.indexing._iLocIndexer at 0x19cf8ff8040>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.iloc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "      <th>corr</th>\n",
       "      <th>total_runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.0</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.0</td>\n",
       "      <td>8.660000e+02</td>\n",
       "      <td>8.660000e+02</td>\n",
       "      <td>8.660000e+02</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>8.660000e+02</td>\n",
       "      <td>866.000000</td>\n",
       "      <td>8.660000e+02</td>\n",
       "      <td>866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>430.503464</td>\n",
       "      <td>74.829099</td>\n",
       "      <td>35.669746</td>\n",
       "      <td>5.323326</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.323326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.011576e+12</td>\n",
       "      <td>6.084620e+12</td>\n",
       "      <td>1.509718e+06</td>\n",
       "      <td>92.420301</td>\n",
       "      <td>0.475751</td>\n",
       "      <td>2.461182e+06</td>\n",
       "      <td>115.303123</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>250.130982</td>\n",
       "      <td>25.237066</td>\n",
       "      <td>38.784473</td>\n",
       "      <td>3.685539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.685539</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.873988e+12</td>\n",
       "      <td>7.679337e+11</td>\n",
       "      <td>2.227404e+05</td>\n",
       "      <td>13.431778</td>\n",
       "      <td>0.499700</td>\n",
       "      <td>1.650302e+05</td>\n",
       "      <td>88.767337</td>\n",
       "      <td>1.110865e-16</td>\n",
       "      <td>0 days 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.860268e-01</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>9.809189e+05</td>\n",
       "      <td>51.823166</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.035017e+06</td>\n",
       "      <td>0.586027</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>214.250000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.959891e+02</td>\n",
       "      <td>6.225258e+12</td>\n",
       "      <td>1.530484e+06</td>\n",
       "      <td>91.860361</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.495047e+06</td>\n",
       "      <td>9.028410</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>430.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.634295e+06</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1.634295e+06</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.546446e+06</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>646.750000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.874466e+12</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1.634295e+06</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.546446e+06</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>863.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>6.967889e+12</td>\n",
       "      <td>1.634295e+06</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.639676e+06</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>5.289032e-01</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        model_num      epochs  batch_size  neurons_in_inputlayer  \\\n",
       "count  866.000000  866.000000  866.000000             866.000000   \n",
       "mean   430.503464   74.829099   35.669746               5.323326   \n",
       "std    250.130982   25.237066   38.784473               3.685539   \n",
       "min      0.000000    1.000000    1.000000               1.000000   \n",
       "25%    214.250000   50.000000    1.000000               1.000000   \n",
       "50%    430.500000   50.000000   10.000000               5.000000   \n",
       "75%    646.750000  100.000000   32.000000              10.000000   \n",
       "max    863.000000  100.000000  100.000000              10.000000   \n",
       "\n",
       "       num_hiddenlayer  neurons_in_hiddenlayer  num_dropout_layers  \\\n",
       "count            866.0              866.000000               866.0   \n",
       "mean               1.0                5.323326                 0.0   \n",
       "std                0.0                3.685539                 0.0   \n",
       "min                1.0                1.000000                 0.0   \n",
       "25%                1.0                1.000000                 0.0   \n",
       "50%                1.0                5.000000                 0.0   \n",
       "75%                1.0               10.000000                 0.0   \n",
       "max                1.0               10.000000                 0.0   \n",
       "\n",
       "               loss      mse_test      mae_test   mape_test  \\\n",
       "count  8.660000e+02  8.660000e+02  8.660000e+02  866.000000   \n",
       "mean   2.011576e+12  6.084620e+12  1.509718e+06   92.420301   \n",
       "std    2.873988e+12  7.679337e+11  2.227404e+05   13.431778   \n",
       "min    5.860268e-01  4.141292e+12  9.809189e+05   51.823166   \n",
       "25%    1.959891e+02  6.225258e+12  1.530484e+06   91.860361   \n",
       "50%    1.634295e+06  6.484386e+12  1.634295e+06  100.000000   \n",
       "75%    5.874466e+12  6.484386e+12  1.634295e+06  100.000000   \n",
       "max    6.484386e+12  6.967889e+12  1.634295e+06  100.000000   \n",
       "\n",
       "       cosine_similarity_test     rmse_test   msle_test          corr  \\\n",
       "count              866.000000  8.660000e+02  866.000000  8.660000e+02   \n",
       "mean                 0.475751  2.461182e+06  115.303123  5.289032e-01   \n",
       "std                  0.499700  1.650302e+05   88.767337  1.110865e-16   \n",
       "min                  0.000000  2.035017e+06    0.586027  5.289032e-01   \n",
       "25%                  0.000000  2.495047e+06    9.028410  5.289032e-01   \n",
       "50%                  0.000000  2.546446e+06  195.989105  5.289032e-01   \n",
       "75%                  1.000000  2.546446e+06  195.989105  5.289032e-01   \n",
       "max                  1.000000  2.639676e+06  195.989105  5.289032e-01   \n",
       "\n",
       "                total_runtime  \n",
       "count                     866  \n",
       "mean   0 days 09:08:40.950942  \n",
       "std           0 days 00:00:00  \n",
       "min    0 days 09:08:40.950942  \n",
       "25%    0 days 09:08:40.950942  \n",
       "50%    0 days 09:08:40.950942  \n",
       "75%    0 days 09:08:40.950942  \n",
       "max    0 days 09:08:40.950942  "
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-174-a29a9f18e7c3>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-174-a29a9f18e7c3>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    class(results_df.columns)\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "type(results_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['model_num', 'optimizer', 'loss_fn', 'activation_fn',\n",
      "       'output_activation_fn', 'epochs', 'batch_size', 'neurons_in_inputlayer',\n",
      "       'num_hiddenlayer', 'neurons_in_hiddenlayer', 'num_dropout_layers',\n",
      "       'loss', 'mse_test', 'mae_test', 'mape_test', 'cosine_similarity_test',\n",
      "       'rmse_test', 'msle_test', 'corr', 'total_runtime'],\n",
      "      dtype='object')\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(results_df.columns)\n",
    "print(len(results_df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'results_df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-42-0b670b12d117>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mresults_df\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'results_df' is not defined"
     ]
    }
   ],
   "source": [
    "results_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_df = pd.read_csv(\"Experimental_results/Experiment4_results_views_vs_comments.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(866, 21)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'model_num', 'optimizer', 'loss_fn', 'activation_fn',\n",
       "       'output_activation_fn', 'epochs', 'batch_size', 'neurons_in_inputlayer',\n",
       "       'num_hiddenlayer', 'neurons_in_hiddenlayer', 'num_dropout_layers',\n",
       "       'loss', 'mse_test', 'mae_test', 'mape_test', 'cosine_similarity_test',\n",
       "       'rmse_test', 'msle_test', 'corr', 'total_runtime'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for each metric find min and max value combinations.\n",
    "\n",
    "#first select the metric columns: two ways to do this:\n",
    "#1) results_df.loc[:, results_df.columns.str.contains('test')]\n",
    "#2) results_df.filter(regex='test', axis = 1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(866, 6)\n",
      "Index(['mse_test', 'mae_test', 'mape_test', 'cosine_similarity_test',\n",
      "       'rmse_test', 'msle_test'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "pandas.core.indexes.base.Index"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df_metrics = results_df.loc[:, results_df.columns.str.contains('test')]\n",
    "print(results_df_metrics.shape)\n",
    "print(results_df_metrics.columns)\n",
    "type(results_df_metrics.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mse_test                  6.967889e+12\n",
       "mae_test                  1.634295e+06\n",
       "mape_test                 1.000000e+02\n",
       "cosine_similarity_test    1.000000e+00\n",
       "rmse_test                 2.639676e+06\n",
       "msle_test                 1.959891e+02\n",
       "dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df_metrics.max()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mse_test                  723\n",
       "mae_test                    0\n",
       "mape_test                   0\n",
       "cosine_similarity_test      3\n",
       "rmse_test                 723\n",
       "msle_test                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxValueIndex = results_df_metrics.idxmax()\n",
    "maxValueIndex\n",
    "#results_df.iloc[maxValueIndex] # The inside need to contain a list: []"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse_test                  4.141292e+12\n",
      "mae_test                  9.809189e+05\n",
      "mape_test                 5.182317e+01\n",
      "cosine_similarity_test    0.000000e+00\n",
      "rmse_test                 2.035017e+06\n",
      "msle_test                 5.860268e-01\n",
      "dtype: float64\n",
      "\n",
      "mse_test                    4\n",
      "mae_test                  262\n",
      "mape_test                 256\n",
      "cosine_similarity_test      0\n",
      "rmse_test                   4\n",
      "msle_test                 838\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(results_df_metrics.min())\n",
    "\n",
    "print()\n",
    "minValueIndex = results_df_metrics.idxmin()\n",
    "print(minValueIndex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[  4 262 256   0   4 838]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>output_activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>...</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "      <th>corr</th>\n",
       "      <th>total_runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>1048607.750</td>\n",
       "      <td>60.543694</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2035016.625</td>\n",
       "      <td>1.189505</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>262</td>\n",
       "      <td>260.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mae</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.809189e+05</td>\n",
       "      <td>4.255918e+12</td>\n",
       "      <td>980918.875</td>\n",
       "      <td>60.757793</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2062987.625</td>\n",
       "      <td>0.667647</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256</th>\n",
       "      <td>256</td>\n",
       "      <td>254.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mae</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.058086e+06</td>\n",
       "      <td>4.790659e+12</td>\n",
       "      <td>1058086.500</td>\n",
       "      <td>51.823166</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2188757.250</td>\n",
       "      <td>0.916736</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>6.484386e+12</td>\n",
       "      <td>1634295.375</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2546445.750</td>\n",
       "      <td>195.989105</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>nadam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>4.141292e+12</td>\n",
       "      <td>1048607.750</td>\n",
       "      <td>60.543694</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2035016.625</td>\n",
       "      <td>1.189505</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>838</th>\n",
       "      <td>838</td>\n",
       "      <td>836.0</td>\n",
       "      <td>adam</td>\n",
       "      <td>msle</td>\n",
       "      <td>selu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.860268e-01</td>\n",
       "      <td>5.225329e+12</td>\n",
       "      <td>1046295.750</td>\n",
       "      <td>72.798332</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2285897.750</td>\n",
       "      <td>0.586027</td>\n",
       "      <td>0.528903</td>\n",
       "      <td>0 days 09:08:40.950942</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  model_num optimizer loss_fn activation_fn  \\\n",
       "4             4        2.0     nadam     mse          relu   \n",
       "262         262      260.0     nadam     mae          selu   \n",
       "256         256      254.0     nadam     mae          selu   \n",
       "0             0        0.0     nadam     mse          relu   \n",
       "4             4        2.0     nadam     mse          relu   \n",
       "838         838      836.0      adam    msle          selu   \n",
       "\n",
       "    output_activation_fn  epochs  batch_size  neurons_in_inputlayer  \\\n",
       "4                   relu    50.0         1.0                    1.0   \n",
       "262                 relu   100.0         1.0                   10.0   \n",
       "256                 relu   100.0         1.0                    1.0   \n",
       "0                   relu     1.0         1.0                    1.0   \n",
       "4                   relu    50.0         1.0                    1.0   \n",
       "838                 relu   100.0         1.0                   10.0   \n",
       "\n",
       "     num_hiddenlayer  ...  num_dropout_layers          loss      mse_test  \\\n",
       "4                1.0  ...                 0.0  4.141292e+12  4.141292e+12   \n",
       "262              1.0  ...                 0.0  9.809189e+05  4.255918e+12   \n",
       "256              1.0  ...                 0.0  1.058086e+06  4.790659e+12   \n",
       "0                1.0  ...                 0.0  6.484386e+12  6.484386e+12   \n",
       "4                1.0  ...                 0.0  4.141292e+12  4.141292e+12   \n",
       "838              1.0  ...                 0.0  5.860268e-01  5.225329e+12   \n",
       "\n",
       "        mae_test   mape_test  cosine_similarity_test    rmse_test   msle_test  \\\n",
       "4    1048607.750   60.543694                     1.0  2035016.625    1.189505   \n",
       "262   980918.875   60.757793                     1.0  2062987.625    0.667647   \n",
       "256  1058086.500   51.823166                     1.0  2188757.250    0.916736   \n",
       "0    1634295.375  100.000000                     0.0  2546445.750  195.989105   \n",
       "4    1048607.750   60.543694                     1.0  2035016.625    1.189505   \n",
       "838  1046295.750   72.798332                     1.0  2285897.750    0.586027   \n",
       "\n",
       "         corr           total_runtime  \n",
       "4    0.528903  0 days 09:08:40.950942  \n",
       "262  0.528903  0 days 09:08:40.950942  \n",
       "256  0.528903  0 days 09:08:40.950942  \n",
       "0    0.528903  0 days 09:08:40.950942  \n",
       "4    0.528903  0 days 09:08:40.950942  \n",
       "838  0.528903  0 days 09:08:40.950942  \n",
       "\n",
       "[6 rows x 21 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(minValueIndex.values)\n",
    "results_df.iloc[minValueIndex.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>mse_test</td>\n",
       "      <td>6.484386e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>mse_test</td>\n",
       "      <td>6.484386e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>mse_test</td>\n",
       "      <td>6.484386e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>mse_test</td>\n",
       "      <td>4.659994e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>mse_test</td>\n",
       "      <td>4.141292e+12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5191</th>\n",
       "      <td>859.0</td>\n",
       "      <td>msle_test</td>\n",
       "      <td>3.139518e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5192</th>\n",
       "      <td>860.0</td>\n",
       "      <td>msle_test</td>\n",
       "      <td>3.476908e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5193</th>\n",
       "      <td>861.0</td>\n",
       "      <td>msle_test</td>\n",
       "      <td>1.959891e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5194</th>\n",
       "      <td>862.0</td>\n",
       "      <td>msle_test</td>\n",
       "      <td>4.270843e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5195</th>\n",
       "      <td>863.0</td>\n",
       "      <td>msle_test</td>\n",
       "      <td>4.281861e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5196 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      model_num   variable         value\n",
       "0           0.0   mse_test  6.484386e+12\n",
       "1           0.0   mse_test  6.484386e+12\n",
       "2           0.0   mse_test  6.484386e+12\n",
       "3           1.0   mse_test  4.659994e+12\n",
       "4           2.0   mse_test  4.141292e+12\n",
       "...         ...        ...           ...\n",
       "5191      859.0  msle_test  3.139518e+01\n",
       "5192      860.0  msle_test  3.476908e+01\n",
       "5193      861.0  msle_test  1.959891e+02\n",
       "5194      862.0  msle_test  4.270843e+01\n",
       "5195      863.0  msle_test  4.281861e+01\n",
       "\n",
       "[5196 rows x 3 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert the data from wide format to long format. use pd.melt()\n",
    "\n",
    "results_df_long0 = pd.melt(results_df, id_vars='model_num', value_vars=results_df_metrics.columns)\n",
    "results_df_long0\n",
    "\n",
    "#results_df_long = pd.wide_to_long(results_df, i = \"model_num\", j=\"metric\", stubnames= results_df_metrics.columns)\n",
    "#results_df_long"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Summarize the results as boxplots\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(15, 8))\n",
    "sns.boxplot(x='variable', y='value', \n",
    "            data= results_df_long0[results_df_long0.variable!= 'mse_test'], \n",
    "            palette=\"muted\", ax = ax)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for variable in results_df_metrics:\n",
    "    \n",
    "    fig, ax = plt.subplots(nrows=1, ncols=1)#,figsize=(15, 8))\n",
    "    sns.boxplot(x='variable', y='value', \n",
    "                data= results_df_long0[results_df_long0.variable == variable], \n",
    "                palette=\"muted\", ax = ax)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEHCAYAAABBW1qbAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUYklEQVR4nO3df7DddX3n8eeLoNj6CyiBjQQaqplWcEZ0Y/xBxxVwIa2uuDug6dYauu5mtcjKumMXup3tuDOZ4tSxdJ0FN0MtaUWZ6MqS+gNhI7ZuhwoBUQiIpIKQTZYEHEHXXWzgvX+cLx8P95577wm559x7kudjJnPO+Xw/33Pen3zuPa/7/Z5zPidVhSRJAIctdAGSpMXDUJAkNYaCJKkxFCRJjaEgSWoMBUlSc/hCF3AgjjnmmFqxYsVClyFJE+W22257pKqWDto20aGwYsUKtm3bttBlSNJESfL9mbZ5+kiS1BgKkqTGUJAkNYaCJKkxFCRJjaEgSWoMBUlSYyhIkpqJ/vCaJA3j/PdeyO5HHpvWvuyYF3PVJz6+ABUtXoaCpIPe7kce46iz3je9/YYrFqCaxc3TR5KkxlCQJDWGgiSpMRQkSY2hIElqDAVJUjPSUEjyQJI7k9yRZFvXdnSSG5Pc110e1df/kiQ7ktyb5OxR1iZJmm4cRwqnV9WpVbWqu30xsLWqVgJbu9skORlYC5wCrAEuT7JkDPVJkjoLcfroHGBTd30T8Pa+9muq6omquh/YAawef3mSdOgadSgUcEOS25Ks79qOq6rdAN3lsV378cBDffvu7NokSWMy6mUuTquqXUmOBW5M8p1Z+mZAW03r1AuX9QAnnnji/FQpSQJGfKRQVbu6yz3AtfROBz2cZBlAd7mn674TOKFv9+XArgH3ubGqVlXVqqVLl46yfEk65IwsFJI8P8kLn74OnAXcBWwB1nXd1gHXdde3AGuTHJHkJGAlcMuo6pMkTTfK00fHAdcmefpxPl1V1ye5Fdic5D3Ag8B5AFW1Pclm4G5gH3BBVT05wvokSVOMLBSq6nvAKwe0PwqcOcM+G4ANo6pJkjQ7P9EsSWoMBUlSYyhIkhpDQZLUGAqSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktQYCpKkxlCQJDWGgiSpMRQkSY2hIElqDAVJUmMoSJIaQ0GS1BgKkqTGUJAkNYaCJKkxFCRJjaEgSWoMBUlSYyhIkhpDQZLUGAqSpMZQkCQ1Iw+FJEuSfDPJF7rbRye5Mcl93eVRfX0vSbIjyb1Jzh51bZKkZxrHkcIHgHv6bl8MbK2qlcDW7jZJTgbWAqcAa4DLkywZQ32SpM5IQyHJcuAtwJV9zecAm7rrm4C397VfU1VPVNX9wA5g9SjrkyQ906iPFC4Dfhd4qq/tuKraDdBdHtu1Hw881NdvZ9cmSRqTkYVCkrcCe6rqtmF3GdBWA+53fZJtSbbt3bv3gGqUJD3TKI8UTgPeluQB4BrgjCSfAh5Osgygu9zT9d8JnNC3/3Jg19Q7raqNVbWqqlYtXbp0hOVL0qFnZKFQVZdU1fKqWkHvBeSvVtW7gC3Auq7bOuC67voWYG2SI5KcBKwEbhlVfZKk6Q5fgMe8FNic5D3Ag8B5AFW1Pclm4G5gH3BBVT25APVJ0iFrLKFQVV8DvtZdfxQ4c4Z+G4AN46hJkjSdn2iWJDWGgiSpMRQkSY2hIElqDAVJUmMoSJIaQ0GS1BgKkqTGUJAkNYaCJKkxFCRJjaEgSWoMBUlSYyhIkhpDQZLUGAqSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktQYCpKkxlCQJDWGgiSpMRQkSY2hIElqDAVJUmMoSJKaoUIhyWnDtE3Z/rwktyT5VpLtST7ctR+d5MYk93WXR/Xtc0mSHUnuTXL2/g5GknRghj1S+PiQbf2eAM6oqlcCpwJrkrwOuBjYWlUrga3dbZKcDKwFTgHWAJcnWTJkfZKkeXD4bBuTvB54A7A0yQf7Nr0ImPUJu6oK+HF38zndvwLOAd7UtW8Cvgb8+679mqp6Arg/yQ5gNXDz8MORJB2IuY4Ungu8gF54vLDv3+PAuXPdeZIlSe4A9gA3VtU3gOOqajdAd3ls1/144KG+3Xd2bZKkMZn1SKGq/gr4qyRXVdX39/fOq+pJ4NQkRwLXJnnFLN0z6C6mdUrWA+sBTjzxxP0tSZI0i1lDoc8RSTYCK/r3qaozhtm5qn6Y5Gv0Xit4OMmyqtqdZBm9owjoHRmc0LfbcmDXgPvaCGwEWLVq1bTQkCQ9e8OGwmeBTwBXAk8Os0OSpcDfd4Hwc8CbgY8AW4B1wKXd5XXdLluATyf5GPASYCVwy5D1SZLmwbChsK+qrtjP+14GbOreQXQYsLmqvpDkZmBzkvcADwLnAVTV9iSbgbuBfcAF3eknSdKYDBsKf5nkd4Br6b3VFICq+sFMO1TVt4FXDWh/FDhzhn02ABuGrEmSNM+GDYV13eWH+toK+KX5LUeStJCGCoWqOmnUhUiSFt5QoZDk3YPaq+rP57ccSdJCGvb00Wv6rj+P3msCtwOGgiQdRIY9fXRh/+0kLwb+YiQVSZIWzLNdOvsn9D5HIEk6iAz7msJf8rMlJ5YALwc2j6ooSdLCGPY1hY/2Xd8HfL+qdo6gHknSAhrq9FG3MN536K2QehTw01EWJUlaGMN+89o76K1DdB7wDuAbSeZcOluSNFmGPX30H4DXVNUeaIvd/Q/gc6MqTJI0fsO+++iwpwOh8+h+7CtJmhDDHilcn+QrwGe62+8EvjSakiRJC2Wu72h+Gb2vz/xQkn8G/Cq9b0i7Gbh6DPVJksZorlNAlwE/Aqiqz1fVB6vq39I7SrhstKVJksZtrlBY0X0vwjNU1TZ6X80pSTqIzBUKz5tl28/NZyGSpIU3VyjcmuRfTW3svkrzttGUJElaKHO9++gi4Nokv8nPQmAV8Fzgn46wLknSApg1FKrqYeANSU4HXtE1f7GqvjryyiRJYzfs9yncBNw04lokSQvMTyVLkhpDQZLUGAqSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSmpGFQpITktyU5J4k25N8oGs/OsmNSe7rLo/q2+eSJDuS3Jvk7FHVJkkabJRHCvuAf1dVLwdeB1yQ5GTgYmBrVa0Etna36batBU4B1gCXJ1kywvokSVOMLBSqandV3d5d/xFwD3A8cA6wqeu2CXh7d/0c4JqqeqKq7gd2AKtHVZ8kabqxvKaQZAXwKuAb9L7zeTf0ggM4tut2PPBQ3247uzZJ0piMPBSSvAD4b8BFVfX4bF0HtNWA+1ufZFuSbXv37p2vMiVJjDgUkjyHXiBcXVWf75ofTrKs274M2NO17wRO6Nt9ObBr6n1W1caqWlVVq5YuXTq64iXpEDTKdx8F+FPgnqr6WN+mLcC67vo64Lq+9rVJjkhyErASuGVU9UmSphvqS3aepdOA3wLuTHJH1/Z7wKXA5u57nh8EzgOoqu1JNgN303vn0gVV9eQI65MkTTGyUKiq/8ng1wkAzpxhnw3AhlHVJEmanZ9oliQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktQYCpKkxlCQJDWGgiSpMRQkSY2hIElqDAVJUmMoSJIaQ0GS1BgKkqTGUJAkNYaCJKkxFCRJjaEgSWoMBUlSYyhIkhpDQZLUGAqSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktSMLBSSfDLJniR39bUdneTGJPd1l0f1bbskyY4k9yY5e1R1SZJmNsojhauANVPaLga2VtVKYGt3myQnA2uBU7p9Lk+yZIS1SZIGGFkoVNVfAz+Y0nwOsKm7vgl4e1/7NVX1RFXdD+wAVo+qNknSYON+TeG4qtoN0F0e27UfDzzU129n1zZNkvVJtiXZtnfv3pEWK0mHmsXyQnMGtNWgjlW1sapWVdWqpUuXjrgsSTq0jDsUHk6yDKC73NO17wRO6Ou3HNg15tok6ZA37lDYAqzrrq8DrutrX5vkiCQnASuBW8ZcmyQd8g4f1R0n+QzwJuCYJDuBPwAuBTYneQ/wIHAeQFVtT7IZuBvYB1xQVU+OqjZJ0mAjC4Wq+o0ZNp05Q/8NwIZR1SNJmttieaFZkrQIGAqSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktQYCpKkxlCQJDWGgiSpMRQkSY2hIElqRrZ0tiSN2/nvvZDdjzw2rf3u736X085agIImkKEg6aCx+5HHOOqs901r/+ldFy5ANZPJ00eSpMZQkCQ1hoIkqTEUJEmNoSBJagwFSVJjKEiSGkNBktT44bUxm+kTl/fvuJeTXvbL09qXHfNirvrEx8dRmiQZCuM20ycu77jrwoHtu2+4YhxlSRJgKIyMa7BIozXod8zfrwNnKIyIa7BIozXod8zfrwN3SIfCoL80PIcvLS4edY/XIR0Kg/7S2PrHF3D2ue+e1nemF4JnavcHVto/sz75v/+Pp7V7VDAaiy4UkqwB/gRYAlxZVZeO8/F/Woft1wvBM7XP1w/s3dvvmhZSHs3Mj5mehPz/nR/7+//rKdfFYVGFQpIlwH8B/jGwE7g1yZaqunthK1s4g0LKdyTNj5mehBbT/+/+PrGOsv/+vp16pr/wZzoaP9SPrhfLHymLKhSA1cCOqvoeQJJrgHOAQzYURmmx/BA+m1pGWfugozOYv8+SDKp9Xp9YB/SfKej2Jxj39+3UM/2FP9PR+CQcEYzy526x/JGSqhrrA84mybnAmqr6l93t3wJeW1Xv7+uzHljf3XwFcNfYCx29Y4BHFrqIEXBck8VxTY79HdMvVtXSQRsW25FCBrQ9I7WqaiOwESDJtqpaNY7CxslxTRbHNVkOxnHN55gW29pHO4ET+m4vB3YtUC2SdMhZbKFwK7AyyUlJngusBbYscE2SdMhYVKePqmpfkvcDX6H3ltRPVtX2WXbZOJ7Kxs5xTRbHNVkOxnHN25gW1QvNkqSFtdhOH0mSFpChIElqJiYUkixJ8s0kXxiwLUn+c5IdSb6d5NULUeOzMce43pTksSR3dP/+40LUuL+SPJDkzq7mbQO2T+R8DTGuiZuvJEcm+VyS7yS5J8nrp2yf1Lmaa1yTOFe/3FfvHUkeT3LRlD4HPF+L6oXmOXwAuAd40YBtvwas7P69Friiu5wEs40L4OtV9dYx1jNfTq+qmT5MM8nzNdu4YPLm60+A66vq3O4dfz8/ZfukztVc44IJm6uquhc4FdqSQP8LuHZKtwOer4k4UkiyHHgLcOUMXc4B/rx6/hY4MsmysRX4LA0xroPVRM7XwSbJi4A3An8KUFU/raofTuk2cXM15Lgm3ZnA31XV96e0H/B8TUQoAJcBvws8NcP244GH+m7v7NoWu8uYfVwAr0/yrSRfTnLKeMo6YAXckOS2blmSqSZ1vuYaF0zWfP0SsBf4s+4U5pVJnj+lzyTO1TDjgsmaq6nWAp8Z0H7A87XoQyHJW4E9VXXbbN0GtC3q99oOOa7b6a1R8krg48B/H0dt8+C0qno1vUPZC5K8ccr2iZuvzlzjmrT5Ohx4NXBFVb0K+D/AxVP6TOJcDTOuSZurpjsd9jbgs4M2D2jbr/la9KEAnAa8LckDwDXAGUk+NaXPJC6PMee4qurxqvpxd/1LwHOSHDP2SvdTVe3qLvfQO+e5ekqXSZyvOcc1gfO1E9hZVd/obn+O3pPp1D6TNldzjmsC56rfrwG3V9XDA7Yd8Hwt+lCoqkuqanlVraB3yPTVqnrXlG5bgHd3r7y/DnisqnaPu9b9Mcy4kvyDJOmur6Y3X4+Ovdj9kOT5SV749HXgLKavZDtx8zXMuCZtvqrqfwMPJXl6ze4zmb5M/cTN1TDjmrS5muI3GHzqCOZhvibp3UfPkOS9AFX1CeBLwK8DO4CfAL+9gKUdkCnjOhd4X5J9wP8F1tbi/wj6ccC13e/b4cCnq+r6g2C+hhnXJM7XhcDV3SmJ7wG/fRDMFcw9rkmcK5L8PL0vIfvXfW3zOl8ucyFJahb96SNJ0vgYCpKkxlCQJDWGgiSpMRSkMegWaPudA9j/ou6dJzoEJPlkkj1Jpr6de1DfNya5Pcm+JOf2tZ+a5OYk27vF8d45zGMbCtJ4HAk861AALmLwom46OF0FrBmy74PA+cCnp7T/BHh3VZ3S3ddlSY6c684MBR3ykqxIb4nlK5PcleTqJG9O8jdJ7kuyOsk/ys+WLP5m3wfZPpTk1u4vsQ/P8jCXAi/t9v+jmfbtPiT3xW5NnruSvDPJvwFeAtyU5KZR/39o4VXVXwM/6G9L8tIk16e39tbXk/xK1/eBqvo2U9ZQq6rvVtV93fVdwB5g6VyPPbEfXpPm2cuA84D1wK3APwd+ld4aM79H7zvDL6iqv0nyAuD/JTmL3hLFq+mtObMlyRu7X+ipLgZeUVWnAsy0L71f2l1V9Zau34ur6rEkH2TuZbt1cNsIvLeq7kvyWuBy4Ixhduw+tf1c4O/m6msoSD33V9WdAEm2A1urqpLcCaygtz7Vx5JcDXy+qnZ2T+xnAd/s7uMF9J7oB4XCVDPt+3Xgo0k+Anyhqr4+L6PTROv+EHkD8NnuU/UARwy57zLgL4B1VTXbisyAoSA97Ym+60/13X4KOLyqLk3yRXpLCPxtkjfT+wv/D6vqvz6Lx5tx3yT/sHucP0xyQ1X9p2dx/zq4HAb88OkjzWGl990SXwR+v/t+haEeSNIckry0qu6sqo8A24BfAb4C/IvurziSHJ/k2Bnu4kfAC/tuD9w3yUuAn1TVp4CP8rPVPafur0NIVT0O3J/kPGhfu/nK2fbp1n26lt6X7gxaZnsgjxSk4VyU5HTgSXorbn65qp5I8nLg5u6Q/sfAu+i9oPcMVfVo98L1Xd2+H5ph35cBf5TkKeDvgfd1d7ER+HKS3VV1+khHqgWX5DPAm4BjkuwE/gD4TeCKJL8PPIfeKc1vJXkNvSf/o4B/kuTD3TuO3kHvG+h+Icn53V2fX1V3zPrYLognSXqap48kSY2nj6R5lOQXgK0DNp1ZVZPyJS46hHn6SJLUePpIktQYCpKkxlCQJDWGgiSpMRQkSY2hIElq/j/BGPbS3h8/tgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram using sns distribution\n",
    "\n",
    "#sns.histplot(results_df.rmse_test)\n",
    "#sns.displot(results_df.rmse_test)\n",
    "\n",
    "#fig, ax = plt.subplots(nrows=3, ncols=2)\n",
    "for metric in results_df_metrics.columns:\n",
    "\n",
    "    #print(metric)\n",
    "    sns.histplot(results_df[metric])\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### This code is amazingly beautiful and I give full credit from where I copied it: Stackoverflow: https://stackoverflow.com/questions/34439/finding-what-methods-a-python-object-has\n",
    "\n",
    "import pandas as pd\n",
    "df = pd.DataFrame([[10, 20, 30], [100, 200, 300]],\n",
    "                  columns=['foo', 'bar', 'baz'])\n",
    "def get_methods(object, spacing=20):\n",
    "  methodList = []\n",
    "  for method_name in dir(object):\n",
    "    try:\n",
    "        if callable(getattr(object, method_name)):\n",
    "            methodList.append(str(method_name))\n",
    "    except:\n",
    "        methodList.append(str(method_name))\n",
    "  processFunc = (lambda s: ' '.join(s.split())) or (lambda s: s)\n",
    "  for method in methodList:\n",
    "    try:\n",
    "        print(str(method.ljust(spacing)) + ' ' +\n",
    "              processFunc(str(getattr(object, method).__doc__)[0:90]))\n",
    "    except:\n",
    "        print(method.ljust(spacing) + ' ' + ' getattr() failed')\n",
    "\n",
    "get_methods(df['foo'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-37-d542c2310d8d>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-37-d542c2310d8d>\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    plt.show()\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Summarize the results\n",
    "\n",
    "#plt.subplots(nrows=1, ncols=1,figsize=(15, 8))\n",
    "sns.boxplot( data=results_df['mse_test', 'mae_test', 'rmse_test', 'msle_test']\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Group by summary results: Grouping variables: loss_fn, optimizer, and activation_fn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## We will search which combination of hyperparameters performs the best for the different metrics - and which metrics are useful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Neural Network with multivariable analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting up the training and test data\n",
    "\n",
    "The data we will be using will be the 'ted' data since there is more preprossessing done on it. The ted data is missing non-ted talks as they are excluded. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cleaning the data:** Should the cleaning be done before or after the data splitting. To be 100% sure, it should be done after the splitting. However, the training data is cleaned so should the test data be. This is harder and more work, and because it is harder this is what we will do. To make it easy what is hard, make a function that only needs a data set to be passed in. The biggest issue of first cleaning is that it is possible to have information leak into the rows that will be used as test set from the training set. This 'leaky' problem must be avoided."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obviously, I do know that some steps can be done before splitting the data and no information will be leaked e.g. deleting columns that are not variables. However, I propose just to make a function that does all the cleaning steps and simply applying the functions to both training and test sets. This way everything stays in one place and things are more tracable. Although, yes, it may be over work and better to quickly just get rid of all the columns first before anything is done."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the data is split into train and test. We could further divide the training data into train and validation sets. So our split of the data will be 60:20:20. What we can then do is while training the model using the 60% of the data also indicate in val_per = .2 so that cross validatio is also performed during the training phase. This three phases allow us to first train all the models, then on the validation set compare all the models and choosing the best performing one, and finally using the test set to find the accuracy of the best model in production. Now one last word. If the data set is very very large people at Dessa implementing deep learning for corporate clients have told me that cross validation can be left out, because the data is so large. My reasoning, if this is indeed the case, is because there is only redundant information learned by performing cross validation. The data is so large the model learns all the information in the data with regular training. Cross validation therefore, I surmise, can also be thought as a data augmentation method, nor a data trend augmentation, but data trend augmentation. Data trend augmentation is creating and replicating patterns in the data that already exist and making them stronger or more detectable. \n",
    "\n",
    "**Data Cleaning**\n",
    "\n",
    "Questions on data cleaning: Should we normalize the data for neural network models. We do not need to normalize the data for the random forest algorithm. I think we do not need to. \n",
    "\n",
    "I will now perform the data cleaning steps which I first list down here for consision and comprehensive vision:\n",
    "\n",
    "0. Remove columns that are not variables such as the indexing and other book keeping columns. \n",
    "1. Create dummy variables for categorical data. \n",
    "2. Make sure all the data is either numerical or categorical. Dates should be converted to numerical or categorical; should not be left as date type data. \n",
    "3. Any other data cleaning steps that need to be done? Nothing at the moment comes to mind. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['index', 'comments', 'description', 'duration', 'event', 'film_date',\n",
      "       'languages', 'main_speaker', 'name', 'num_speaker', 'published_date',\n",
      "       'ratings', 'related_talks', 'speaker_occupation', 'tags', 'title',\n",
      "       'url', 'views', 'event_cat', 'film_month', 'pub_month', 'film_weekday',\n",
      "       'pub_weekday', 'Funny', 'Beautiful', 'Ingenious', 'Courageous',\n",
      "       'Longwinded', 'Confusing', 'Informative', 'Fascinating', 'Unconvincing',\n",
      "       'Persuasive', 'Jaw-dropping', 'OK', 'Obnoxious', 'Inspiring',\n",
      "       'positive', 'negative', 'pop_ratio', 'Popular', 'occ'],\n",
      "      dtype='object')\n",
      "42\n"
     ]
    }
   ],
   "source": [
    "# Again look at the data columns and the type of variables they are. \n",
    "\n",
    "\n",
    "print(ted.columns)\n",
    "print(len(ted.columns))\n",
    "\n",
    "# Remove the columns: index, url, \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This has the day, and month, but not the year the talks were published. It should be created. Here the statistician in me asks is there sufficient benefit so as to create and add the variable, what the statistician is asking is does the cost of increasing the number of variables, which increases the number of degrees of freedom, making the model more flexible worth the variability explained by the model, or the increase in predictive power. The same question phrased by a computer scientist would be by adding this variable are we overfitting? \n",
    "\n",
    "The statistician hence needs reminding that we only care about if the predictive power of the model increases. This is assessed in the tuning phase of the model when the accuracy is measured on the validation set. If including the variable increases the validation set accuracy then the student of computer scientist within me simply states we need not think any further; we are only interested in predictive power and not in explainability in itself. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will create at the end a cleaned data set called ted_clean. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['comments', 'duration', 'languages', 'num_speaker', 'views',\n",
      "       'event_cat', 'film_month', 'pub_month', 'film_weekday', 'pub_weekday',\n",
      "       'Funny', 'Beautiful', 'Ingenious', 'Courageous', 'Longwinded',\n",
      "       'Confusing', 'Informative', 'Fascinating', 'Unconvincing', 'Persuasive',\n",
      "       'Jaw-dropping', 'OK', 'Obnoxious', 'Inspiring', 'positive', 'negative',\n",
      "       'pop_ratio', 'Popular'],\n",
      "      dtype='object')\n",
      "28\n"
     ]
    }
   ],
   "source": [
    "ted1 = ted.drop(['index', 'url', 'main_speaker', 'speaker_occupation', 'occ', 'film_date', \n",
    "                 'event', 'description', 'ratings', 'name', 'title', 'published_date' , 'related_talks', 'tags'], axis =1)\n",
    "print(ted1.columns)\n",
    "print(len(ted1.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(len(ted1.occ.unique()))\n",
    "#print(len(ted1.occ))\n",
    "#print(ted1.occ.unique())\n",
    "\n",
    "#print(len(ted1.main_speaker.unique()))\n",
    "#print(len(ted1.main_speaker))\n",
    "#print(ted1.main_speaker.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of       comments  duration  languages  num_speaker     views event_cat  \\\n",
       "0         4553      1164         60            1  47227110       TED   \n",
       "1          265       977         43            1   3200520       TED   \n",
       "2          124      1286         26            1   1636292       TED   \n",
       "3          200      1116         35            1   1697550       TED   \n",
       "4          593      1190         48            1  12005869       TED   \n",
       "...        ...       ...        ...          ...       ...       ...   \n",
       "2434        17       476          4            1    450430       TED   \n",
       "2435         6       290          3            1    417470       TED   \n",
       "2436        10       651          1            1    375647       TED   \n",
       "2437        32      1100          1            1    419309      TEDx   \n",
       "2438         8       519          1            1    391721       TED   \n",
       "\n",
       "      film_month  pub_month  film_weekday  pub_weekday  ...  Unconvincing  \\\n",
       "0              2          6             4            0  ...           300   \n",
       "1              2          6             4            0  ...           258   \n",
       "2              2          6             3            0  ...           104   \n",
       "3              2          6             5            0  ...            36   \n",
       "4              2          6             1            1  ...            67   \n",
       "...          ...        ...           ...          ...  ...           ...   \n",
       "2434           6          9             0            1  ...            12   \n",
       "2435           4          9             6            2  ...             1   \n",
       "2436           4          9             6            3  ...             1   \n",
       "2437           7          9             4            3  ...             6   \n",
       "2438           4          9             6            4  ...            21   \n",
       "\n",
       "      Persuasive  Jaw-dropping    OK  Obnoxious  Inspiring  positive  \\\n",
       "0          10704          4439  1174        209      24924     91539   \n",
       "1            268           116   203        131        413      2170   \n",
       "2            230            54   146        142        230      2328   \n",
       "3            460           230    85         35       1070      3488   \n",
       "4           2542          3736   248         61       2893     25063   \n",
       "...          ...           ...   ...        ...        ...       ...   \n",
       "2434          24            14     0          1         27       175   \n",
       "2435           7             8    13          0         20       138   \n",
       "2436           3             1     4          0         30       127   \n",
       "2437          65             7     5          7        147       562   \n",
       "2438           5             3    11          4         26        95   \n",
       "\n",
       "      negative  pop_ratio  Popular  \n",
       "0         1139  80.367867        1  \n",
       "1          565   3.840708        0  \n",
       "2          352   6.613636        1  \n",
       "3          157  22.216561        1  \n",
       "4          311  80.588424        1  \n",
       "...        ...        ...      ...  \n",
       "2434        19   9.210526        1  \n",
       "2435         2  69.000000        1  \n",
       "2436         7  18.142857        1  \n",
       "2437        18  31.222222        1  \n",
       "2438        38   2.500000        0  \n",
       "\n",
       "[2439 rows x 28 columns]>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ted1.head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "## We will now create dummy variables. \n",
    "#ted2 = ted1.drop([''])\n",
    "ted2 = pd.get_dummies(ted1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['comments', 'duration', 'languages', 'num_speaker', 'views',\n",
      "       'film_month', 'pub_month', 'film_weekday', 'pub_weekday', 'Funny',\n",
      "       'Beautiful', 'Ingenious', 'Courageous', 'Longwinded', 'Confusing',\n",
      "       'Informative', 'Fascinating', 'Unconvincing', 'Persuasive',\n",
      "       'Jaw-dropping', 'OK', 'Obnoxious', 'Inspiring', 'positive', 'negative',\n",
      "       'pop_ratio', 'Popular', 'event_cat_TED', 'event_cat_TEDx'],\n",
      "      dtype='object')\n",
      "29\n"
     ]
    }
   ],
   "source": [
    "print(ted2.columns)\n",
    "print(len(ted2.columns)) # WOW, Too many variable were created."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, of all is it correct that so many are created? Secondly, are the correct ones made into dummy variables (i.e. only categorical data ones)? Lastly, is there a better way or since we are using a deep neural network this is good. Or even what we want?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First the proper non-trivial, but still basic model with proper variables and a deep neural network. Statistically speaking we will now do multivariable analysis, instead of univariable analysis, though still using shallow networks. \n",
    "\n",
    "This only has one categorical variable: event_cat\n",
    "\n",
    "We start with data splitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1951\n",
      "488\n",
      "1951\n",
      "488\n",
      "(1951, 28)\n"
     ]
    }
   ],
   "source": [
    "# Seperate the data first into training and testing.\n",
    "X_train, X_test, y_train, y_test = train_test_split( ted2.drop('views', axis = 1), ted['views'], test_size=0.2, random_state=1 )\n",
    "                                                                                     \n",
    "                                                                                     \n",
    "for set in [X_train, X_test, y_train, y_test]:\n",
    "    print( len(set) )\n",
    "    \n",
    "print(X_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1951, 28)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "28"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "X_train.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>output_activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>validation_split</th>\n",
       "      <th>input_dimensions</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>adam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100</td>\n",
       "      <td>32</td>\n",
       "      <td>0.2</td>\n",
       "      <td>28</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>6.475819e+11</td>\n",
       "      <td>6.475819e+11</td>\n",
       "      <td>506732.28125</td>\n",
       "      <td>42.16917</td>\n",
       "      <td>1.0</td>\n",
       "      <td>804724.75</td>\n",
       "      <td>0.217549</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
       "0          0      adam     mse          relu                 relu     100   \n",
       "\n",
       "   batch_size  validation_split  input_dimensions  neurons_in_inputlayer  \\\n",
       "0          32               0.2                28                     50   \n",
       "\n",
       "   num_hiddenlayer  neurons_in_hiddenlayer  num_dropout_layers          loss  \\\n",
       "0                1                      40                   0  6.475819e+11   \n",
       "\n",
       "       mse_test      mae_test  mape_test  cosine_similarity_test  rmse_test  \\\n",
       "0  6.475819e+11  506732.28125   42.16917                     1.0  804724.75   \n",
       "\n",
       "   msle_test  \n",
       "0   0.217549  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This is getting very long. Need to covert this into a script. \n",
    "def model_results(model_num, \n",
    "                  \n",
    "                  #X_train = X_train,\n",
    "                  #y_train = y_train,\n",
    "                  #X_test = X_test, \n",
    "                  #y_test = y_test,\n",
    "                  \n",
    "                  optimizer = 'adam', \n",
    "                  loss_fn = 'mse', \n",
    "                  activation_fn = 'relu', \n",
    "                  output_activation_fn = 'relu', \n",
    "                  \n",
    "                  epochs = 100, \n",
    "                  batch_size =32,\n",
    "                  validation_split = 0.2,\n",
    "                  \n",
    "                  \n",
    "                  neurons_in_inputlayer = 50, \n",
    "                  num_hiddenlayer = 1,  \n",
    "                  neurons_in_hiddenlayer = 40, \n",
    "                  num_dropout_layers = 0,\n",
    "                  \n",
    "                  verbose = 0):  \n",
    "    \n",
    "    # The Model\n",
    "    \n",
    "    input_dimensions = X_train.shape[1]\n",
    "    \n",
    "    model = Sequential()\n",
    "    # Input Layer\n",
    "    model.add(Dense(neurons_in_inputlayer, input_dim = input_dimensions, activation = activation_fn))\n",
    "    # Dropout Layer\n",
    "    #model.add(Dropout(rate = 0.1,seed=100))\n",
    "    # Hidden Layers\n",
    "    model.add(Dense(neurons_in_hiddenlayer,activation = activation_fn))\n",
    "    # Output Layer\n",
    "    model.add(Dense(1,activation = output_activation_fn))\n",
    "\n",
    "    \n",
    "    # Compiling the model\n",
    "    model.compile(loss=loss_fn, optimizer=optimizer,\n",
    "    #metrics=['mse', 'mae', 'mape', CosineSimilarity(), RootMeanSquaredError() , MeanSquaredLogarithmicError() ])\n",
    "    metrics=[ MeanSquaredError(), MeanAbsoluteError(), MeanAbsolutePercentageError() \n",
    "             , CosineSimilarity() , RootMeanSquaredError(), MeanSquaredLogarithmicError()  ]   )\n",
    "\n",
    "    # Train the model and make predictions\n",
    "    model_fit=model.fit(X_train,y_train,epochs=epochs,batch_size=batch_size,verbose=verbose,validation_split=validation_split)\n",
    "    # Evaluate the model\n",
    "    score = model.evaluate(X_test, y_test, verbose = verbose)\n",
    "    \n",
    "    # Make predictions from the trained model\n",
    "    #predictions = model.predict(X_test)\n",
    "    \n",
    "    # Store results\n",
    "    dict = {'model_num':[model_num],\n",
    "        'optimizer':[ optimizer],\n",
    "        'loss_fn':[loss_fn],\n",
    "        'activation_fn':[activation_fn],\n",
    "        'output_activation_fn':[output_activation_fn],\n",
    "        'epochs':[epochs],\n",
    "        'batch_size':[batch_size],\n",
    "        'validation_split':[validation_split],\n",
    "        'input_dimensions':[input_dimensions],\n",
    "        'neurons_in_inputlayer':[neurons_in_inputlayer],\n",
    "        'num_hiddenlayer':[num_hiddenlayer],\n",
    "        'neurons_in_hiddenlayer':[neurons_in_hiddenlayer],\n",
    "        'num_dropout_layers':[num_dropout_layers],            \n",
    "        'loss':[score[0]],\n",
    "        'mse_test':[score[1]],\n",
    "        'mae_test':[score[2]],\n",
    "        'mape_test':[score[3]],\n",
    "        'cosine_similarity_test':[score[4]],\n",
    "        'rmse_test':[score[5]],\n",
    "        'msle_test':[score[6]] \n",
    "       }\n",
    "    \n",
    "    \n",
    "    # \"Plot Loss\"\n",
    "    plt.plot(model_fit.history['loss'])\n",
    "    plt.plot(model_fit.history['val_loss'])\n",
    "    plt.title('model loss')\n",
    "    plt.ylabel('loss')\n",
    "    plt.xlabel('epoch')\n",
    "    plt.legend(['train', 'validation'], loc='upper right')\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "    # Plot metrics\n",
    "    for metric in ['mean_squared_error', 'root_mean_squared_error' ,'mean_absolute_error', 'mean_absolute_percentage_error','cosine_similarity', 'mean_squared_logarithmic_error']:\n",
    "        plt.plot(model_fit.history[metric])\n",
    "        plt.title('Model Metric: '+ metric)\n",
    "        plt.ylabel(metric)\n",
    "        plt.xlabel('epoch')\n",
    "        #plt.plot(model_fit.history['mean_squared_error'])\n",
    "        #plt.plot(model_fit.history['mean_absolute_error'])\n",
    "        #plt.plot(model_fit.history['mean_absolute_percentage_error'])\n",
    "        #pyplot.plot(model_fit.history['cosine_proximity'])\n",
    "        plt.show()\n",
    "\n",
    "    results_df = pd.DataFrame(dict)\n",
    "    #print (\"After Training:\", list(zip(model.metrics_names, score)))\n",
    "    return(results_df)\n",
    "\n",
    "model_0 = model_results(0)\n",
    "model_0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model_num</th>\n",
       "      <th>optimizer</th>\n",
       "      <th>loss_fn</th>\n",
       "      <th>activation_fn</th>\n",
       "      <th>output_activation_fn</th>\n",
       "      <th>epochs</th>\n",
       "      <th>batch_size</th>\n",
       "      <th>validation_split</th>\n",
       "      <th>input_dimensions</th>\n",
       "      <th>neurons_in_inputlayer</th>\n",
       "      <th>num_hiddenlayer</th>\n",
       "      <th>neurons_in_hiddenlayer</th>\n",
       "      <th>num_dropout_layers</th>\n",
       "      <th>loss</th>\n",
       "      <th>mse_test</th>\n",
       "      <th>mae_test</th>\n",
       "      <th>mape_test</th>\n",
       "      <th>cosine_similarity_test</th>\n",
       "      <th>rmse_test</th>\n",
       "      <th>msle_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>adam</td>\n",
       "      <td>mse</td>\n",
       "      <td>relu</td>\n",
       "      <td>relu</td>\n",
       "      <td>100</td>\n",
       "      <td>32</td>\n",
       "      <td>0.2</td>\n",
       "      <td>28</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>6.475819e+11</td>\n",
       "      <td>6.475819e+11</td>\n",
       "      <td>506732.28125</td>\n",
       "      <td>42.16917</td>\n",
       "      <td>1.0</td>\n",
       "      <td>804724.75</td>\n",
       "      <td>0.217549</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   model_num optimizer loss_fn activation_fn output_activation_fn  epochs  \\\n",
       "0          0      adam     mse          relu                 relu     100   \n",
       "\n",
       "   batch_size  validation_split  input_dimensions  neurons_in_inputlayer  \\\n",
       "0          32               0.2                28                     50   \n",
       "\n",
       "   num_hiddenlayer  neurons_in_hiddenlayer  num_dropout_layers          loss  \\\n",
       "0                1                      40                   0  6.475819e+11   \n",
       "\n",
       "       mse_test      mae_test  mape_test  cosine_similarity_test  rmse_test  \\\n",
       "0  6.475819e+11  506732.28125   42.16917                     1.0  804724.75   \n",
       "\n",
       "   msle_test  \n",
       "0   0.217549  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.39543890704087\n",
      "60.456109295913\n"
     ]
    }
   ],
   "source": [
    "print(804724.75/2035016.625)\n",
    "print(100*(2035016.625 - 804724.75) / 2035016.625)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.5288356360358"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(804724.75/2035016.625)**-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.barplot(x=[\"univariable neural network\", \"multivariable neural network\"], y=[2035016.625,804724.75])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see there is a clear improvement using the multivariable model over the univariable model. A 60.46% improvement over the univariable model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First the proper model with proper variables and a deep neural network. Statistically speaking, we will now do multivariable analysis using deep neural networks. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cutting edge and advanced deep learning neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "  \n",
    "# setting the x - coordinates\n",
    "x = np.arange(0, 2*(np.pi), 0.1)\n",
    "# setting the corresponding y - coordinates\n",
    "y = np.sin(x)\n",
    "  \n",
    "# potting the points\n",
    "plt.plot(x, y)\n",
    "  \n",
    "# function to show the plot\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
